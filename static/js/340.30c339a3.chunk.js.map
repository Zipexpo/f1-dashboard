{"version":3,"file":"static/js/340.30c339a3.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","components/viz/Ribbon/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:30}}\r\nconst LineChart = ({data=initData,xKey,yKey,cKey,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const x=[];\r\n            const y=[];\r\n            data.forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n            })\r\n            setPlotdata({\r\n                x,\r\n                y,\r\n            })\r\n        })\r\n    },[xKey,yKey,data]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            debugger\r\n            if (cKey) {\r\n                setColordata(data.map(d=>d[cKey]));\r\n            }else {\r\n                setColordata([]);\r\n            }\r\n        }else\r\n            setColordata([]);\r\n    },[data,cKey,mode])\r\n    const plotopt = [{\r\n        x:plotdata.x,\r\n        y:plotdata.y,\r\n        type: 'scatter',\r\n        mode\r\n        // marker: {color: 'red'},\r\n    }];\r\n    console.log(colorDomain)\r\n    if (colordata.length)\r\n        plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n            colorbarThickness:5,\r\n            showscale,\r\n            cmin:colorDomain[0],cmax:colorDomain[1]\r\n    }\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst Chart = ({data=initData, getArr,getName,xKey,yKey,zKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        debugger\r\n        const traceData = data.map(t=>{\r\n            const x=[];\r\n            const y=[];\r\n            const z=[];\r\n            getArr(t).forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n                z.push(d[zKey]);\r\n            })\r\n            return{\r\n                name:getName(t),\r\n                x,\r\n                y,\r\n                z,\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[xKey,yKey,zKey,data]);\r\n    const plotopt = useMemo(()=>{\r\n        return plotdata.map(d=>({\r\n            ...d,\r\n            type: 'scatter3d',\r\n            colorscale: \"Portland\",\r\n            mode: 'markers',\r\n            marker:{size:3}\r\n        }))\r\n    },[plotdata]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={{...layout,\r\n        scene: {\r\n            xaxis: {\r\n                title: {text: xKey}\r\n            },\r\n            yaxis: {\r\n                title: {text: yKey}\r\n            },\r\n            zaxis: {\r\n                title: {text: zKey}\r\n            }\r\n        }\r\n    }} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack, MenuItem} from \"@mui/material\";\r\nimport {lazy, useEffect, useState} from \"react\";\r\nimport {groups,extent as d3extent,min as d3min, max as d3max} from \"d3\";\r\nimport Loadable from '../../components/Loadable';\r\n\r\n\r\n// dashboard routing\r\n// const LineChart = Loadable(lazy(() => import('../../components/viz/lineChart')));\r\n// const RibbonChart = Loadable(lazy(() => import('../../components/viz/Ribbon')));\r\nimport LineChart from \"../../components/viz/lineChart\";\r\n// import LineChart from \"../../components/viz/lineChart/subplots\";\r\nimport RibbonChart from \"../../components/viz/Ribbon\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [dimensionDetail,setDimensionDetail] = useState({});\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'z',key:null,is3D:true},\r\n        {label:'color',key:null}\r\n    ]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    useEffect(()=>{\r\n        const newProfile = groups(datas,d=>d.Profile);\r\n        const positionK = {};\r\n        const flatdata = [];\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d.AppName]===undefined){\r\n                    positionK[d.AppName] = app.length;\r\n                    app[positionK[d.AppName]]=[d.AppName,[]];\r\n                }\r\n                app[positionK[d.AppName]][1].push(d);\r\n                flatdata.push(d.data);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        const dimensionDetail = {};\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            let dim = Object.keys(datas[0].data[0]);\r\n            dim.forEach(k=>{\r\n                dimensionDetail[k] = [+Infinity,-Infinity];\r\n                const ex = flatdata.map(d=>d3extent(d,d=>+d[k]));\r\n                dimensionDetail[k] = [d3min(ex,d=>d[0]),d3max(ex,d=>d[1])];\r\n            })\r\n            setDimension(dim)\r\n        }else\r\n            setDimension([]);\r\n        setDimensionDetail(dimensionDetail);\r\n    },[datas]);\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    const is3D = ((plotType==='markers')||(plotType==='lines'));\r\n    const renderAxis = ()=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200,display:a.is3D ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n            default:\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n        }\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                        <MenuItem value={'Ribbon'}>\r\n                            3D scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'Splom'}>\r\n                            Splom\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca'}>\r\n                            PCA\r\n                        </MenuItem>\r\n                    </TextField>\r\n                {renderAxis()}\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={is3D?12:6} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h3'}>{profile}</Typography>\r\n                            {is3D&&<Grid container>\r\n                                {pData.map(([app, appData],i) => <Grid key={`${profile} ${app}`} item xs={4}\r\n                                                                     sx={{height: 200, mb: 3}}>\r\n                                    <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                                    {appData[0] &&\r\n                                        <LineChart data={appData[0]?.data} xKey={axis[0].key} yKey={axis[1].key}\r\n                                                   cKey={axis[3].key}\r\n                                                   colorDomain={dimensionDetail[axis[3].key]}\r\n                                                   getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                                   getName={([k,t])=>k}\r\n                                                   mode={plotType}\r\n                                                   showscale={i===2}\r\n                                        />}\r\n                                </Grid>)}\r\n                            </Grid>}\r\n                            {/*{is3D&&<LineChart data={pData}*/}\r\n                            {/*                  xKey={axis[0].key}*/}\r\n                            {/*                  yKey={axis[1].key}*/}\r\n                            {/*                  cKey={plotType==='markers'?axis[3].key:undefined}*/}\r\n                            {/*                  colorDomain={dimensionDetail[axis[3].key]}*/}\r\n                            {/*                  getArr={([k,t])=>t[0]?t[0].data:[]}*/}\r\n                            {/*                  getName={([k,t])=>k}*/}\r\n                            {/*                  mode={plotType}/>*/}\r\n                            {/*}*/}\r\n                            {\r\n                                (plotType==='Ribbon')&&<RibbonChart\r\n                                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                    getName={([k,t])=>k}\r\n                                    data={pData}\r\n                                    xKey={axis[0].key}\r\n                                    yKey={axis[1].key}\r\n                                    zKey={axis[2].key}\r\n                                    cKey={axis[3].key}\r\n                                />\r\n                            }\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","domain","undefined","layout","title","text","pad","margin","t","l","b","r","data","xKey","yKey","cKey","colorDomain","mode","showscale","useTransition","startTransition","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","x","y","forEach","d","push","map","plotopt","type","console","log","length","marker","color","colorscale","colorbarTitleText","colorbarThickness","cmin","cmax","style","width","height","useResizeHandler","getArr","getName","zKey","traceData","z","name","useMemo","size","scene","xaxis","yaxis","zaxis","datas","useSelector","selectDatas","nestData","stNestData","dimension","setDimension","dimensionDetail","setDimensionDetail","plotType","setPlotType","label","key","is3D","axis","setAxis","newProfile","groups","Profile","positionK","flatdata","newdata","p","pd","app","Object","keys","k","AppName","dim","Infinity","ex","d3extent","d3min","d3max","onChangeAxis","value","Grid","container","spacing","gridSpacing","item","xs","Stack","direction","TextField","select","sx","minWidth","onChange","event","target","MenuItem","a","i","Autocomplete","display","options","newValue","renderInput","params","renderAxis","profile","pData","Card","Box","pl","Typography","variant","appData","mb","textAlign","Ribbon"],"sourceRoot":""}