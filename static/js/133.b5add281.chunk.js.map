{"version":3,"file":"static/js/133.b5add281.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","components/viz/lineChart/index_combine.js","components/viz/Ribbon/index.js","components/viz/Splom/index.js","components/viz/PCA/PCA.js","components/viz/PCA/index.js","components/viz/PCA/index_reverse.js","components/viz/similarity/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:30}}\r\nconst LineChart = ({data=initData,xKey,yKey,cKey,getArr,getName,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const x=[];\r\n            const y=[];\r\n            data.forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n            })\r\n            setPlotdata({\r\n                x,\r\n                y,\r\n            })\r\n        })\r\n    },[xKey,yKey,data]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            debugger\r\n            if (cKey) {\r\n                setColordata(data.map(d=>d[cKey]));\r\n            }else {\r\n                setColordata([]);\r\n            }\r\n        }else\r\n            setColordata([]);\r\n    },[data,cKey,mode])\r\n    const plotopt = [{\r\n        x:plotdata.x,\r\n        y:plotdata.y,\r\n        type: 'scatter',\r\n        mode\r\n        // marker: {color: 'red'},\r\n    }];\r\n    console.log(colorDomain)\r\n    if (colordata.length)\r\n        plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n            colorbarThickness:5,\r\n            showscale,\r\n            cmin:colorDomain[0],cmax:colorDomain[1]\r\n        }\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:30}}\r\nconst LineChart = ({data=initData,getArr,getName,xKey,yKey,cKey,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const traceData = data.map(t=>{\r\n                const x=[];\r\n                const y=[];\r\n                getArr(t).forEach(d=>{\r\n                    x.push(d[xKey]);\r\n                    y.push(d[yKey]);\r\n                })\r\n                return{\r\n                    name:getName(t),\r\n                    x,\r\n                    y,\r\n                    type: 'scatter',\r\n                }\r\n            })\r\n            setPlotdata(traceData)\r\n        })\r\n    },[xKey,yKey,data]);\r\n    // useEffect(()=>{\r\n    //     if (mode==='markers'){\r\n    //         debugger\r\n    //         if (cKey) {\r\n    //             setColordata(data.map(d=>d[cKey]));\r\n    //         }else {\r\n    //             setColordata([]);\r\n    //         }\r\n    //     }else\r\n    //         setColordata([]);\r\n    // },[data,cKey,mode])\r\n    // const plotopt = [{\r\n    //     x:plotdata.x,\r\n    //     y:plotdata.y,\r\n    //     type: 'scatter',\r\n    //     mode\r\n    //     // marker: {color: 'red'},\r\n    // }];\r\n    // console.log(colorDomain)\r\n    // if (colordata.length)\r\n    //     plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n    //         colorbarThickness:5,\r\n    //         showscale,\r\n    //         cmin:colorDomain[0],cmax:colorDomain[1]\r\n    // }\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst Chart = ({data=initData, getArr,getName,xKey,yKey,zKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        debugger\r\n        const traceData = data.map(t=>{\r\n            const x=[];\r\n            const y=[];\r\n            const z=[];\r\n            getArr(t).forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n                z.push(d[zKey]);\r\n            })\r\n            return{\r\n                name:getName(t),\r\n                x,\r\n                y,\r\n                z,\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[xKey,yKey,zKey,data]);\r\n    const plotopt = useMemo(()=>{\r\n        return plotdata.map(d=>({\r\n            ...d,\r\n            type: 'scatter3d',\r\n            colorscale: \"Portland\",\r\n            mode: 'markers',\r\n            marker:{size:3}\r\n        }))\r\n    },[plotdata]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={{...layout,\r\n        scene: {\r\n            xaxis: {\r\n                title: {text: xKey}\r\n            },\r\n            yaxis: {\r\n                title: {text: yKey}\r\n            },\r\n            zaxis: {\r\n                title: {text: zKey}\r\n            }\r\n        }\r\n    }} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n    hovermode:'closest',\r\n    dragmode:'select',\r\n    plot_bgcolor:'rgba(240,240,240, 0.95)',\r\n    grid:{roworder:'bottom to top'}\r\n};\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    useEffect(()=>{\r\n        const traceData = data.map(t=>{\r\n            const dimensions = dimensionKeys.map(k=> ({label:k, values:[]}));\r\n            getArr(t).forEach(d=>{\r\n                dimensions.forEach((k)=>{\r\n                    k.values.push(d[k.label]);\r\n                });\r\n            })\r\n            return {\r\n                type: 'splom',\r\n                name:getName(t),\r\n                dimensions,\r\n                marker: {\r\n                    size: 5,\r\n                    line: {\r\n                        color: 'white',\r\n                        width: 0.5\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[dimensionKeys,data]);\r\n    useEffect(()=>{\r\n        const layout = {...initLayout};\r\n        dimensionKeys.forEach((k,i)=> {\r\n            layout[`xaxis${i}`] = axis()\r\n            layout[`yaxis${i}`] = axis()\r\n        })\r\n        setLayout(layout)\r\n    },[dimensionKeys])\r\n    const axis = () => ({\r\n        showline:false,\r\n        zeroline:false,\r\n        gridcolor:'#ffff',\r\n        ticklen:4\r\n    })\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import * as d3 from 'd3'\r\nexport const PCA = function(){\r\n    this.scale = scale;\r\n    this.pca = pca;\r\n\r\n    function mean(X){\r\n        // mean by col\r\n        var T = transpose(X);\r\n        return T.map(function(row){ return d3.sum(row) / X.length; });\r\n    }\r\n\r\n    function transpose(X){\r\n        return d3.range(X[0].length).map(function(i){\r\n            return X.map(function(row){ return row[i]; });\r\n        });\r\n    }\r\n\r\n    function dot(X,Y){\r\n        return X.map(function(row){\r\n            return transpose(Y).map(function(col){\r\n                return d3.sum(d3.zip(row,col).map(function(v){\r\n                    return v[0]*v[1];\r\n                }));\r\n            });\r\n        });\r\n    }\r\n\r\n    function diag(X){\r\n        return d3.range(X.length).map(function(i){\r\n            return d3.range(X.length).map(function(j){ return (i === j) ? X[i] : 0; });\r\n        });\r\n    }\r\n\r\n    function zeros(i,j){\r\n        return d3.range(i).map(function(row){\r\n            return d3.range(j).map(function(){ return 0; });\r\n        });\r\n    }\r\n\r\n    function trunc(X,d){\r\n        return X.map(function(row){\r\n            return row.map(function(x){ return (x < d) ? 0 : x; });\r\n        });\r\n    }\r\n\r\n    function same(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0] === w[1]; });\r\n        }).map(function(row){\r\n            return row.reduce(function(x,y){ return x*y; });\r\n        }).reduce(function(x,y){ return x*y; });\r\n    }\r\n\r\n    function std(X){\r\n        var m = mean(X);\r\n        return sqrt(mean(mul(X,X)));//, mul(m,m));\r\n    }\r\n\r\n    function sqrt(V){\r\n        return V.map(function(x){ return Math.sqrt(x); });\r\n    }\r\n\r\n    function mul(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]*v[1];\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0]*w[1]; });\r\n        });\r\n    }\r\n\r\n    function sub(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]-v[1];\r\n            else return d3.zip(v[0],v[1]).map(function(w){ return w[0]-w[1]; });\r\n        });\r\n    }\r\n\r\n    function div(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){ return v[1]!==0 ? v[0]/(v[1]): 0; });\r\n\r\n    }\r\n\r\n    function scale(X, center, scale){\r\n        // compatible with R scale()\r\n        if (center){\r\n            var m = mean(X);\r\n            X = X.map(function(row){ return sub(row, m); });\r\n        }\r\n\r\n        if (scale){\r\n            var s = std(X);\r\n            X = X.map(function(row){ return div(row, s); });\r\n        }\r\n        return X;\r\n    }\r\n\r\n    // translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n    function svd(A){\r\n        var temp;\r\n        // Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n        var prec = Math.pow(2,-52); // assumes double prec\r\n        var tolerance = 1.e-64/prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n\r\n        var u = A.map(function(row){ return row.slice(0); });\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n\r\n        console.assert(m >= n, 'Need more rows than columns');\r\n\r\n        var e = d3.range(n).map(function(){ return 0; });\r\n        var q = d3.range(n).map(function(){ return 0; });\r\n        var v = zeros(n,n);\r\n\r\n        function pythag(a,b){\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a*Math.sqrt(1.0+(b*b/a/a));\r\n            else if (b === 0)\r\n                return a;\r\n            return b*Math.sqrt(1.0+(a*a/b/b));\r\n        }\r\n\r\n        // Householder's reduction to bidiagonal form\r\n        var f = 0;\r\n        var g = 0;\r\n        var h = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n        var z = 0;\r\n        var s = 0;\r\n\r\n        for (i=0; i < n; i++)\r\n        {\r\n            e[i]= g;\r\n            s= 0.0;\r\n            l= i+1;\r\n            for (j=i; j < m; j++)\r\n                s += (u[j][i]*u[j][i]);\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g-s;\r\n                u[i][i]=f-g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s= 0.0;\r\n                    for (k=i; k < m; k++)\r\n                        s += u[k][i]*u[k][j]\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++)\r\n                        u[k][j]+=f*u[k][i]\r\n                }\r\n            }\r\n            q[i]= g;\r\n            s= 0.0;\r\n            for (j=l; j < n; j++)\r\n                s= s + u[i][j]*u[i][j]\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i+1];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g - s;\r\n                u[i][i+1] = f-g;\r\n                for (j=l; j < n; j++) e[j]= u[i][j]/h\r\n                for (j=l; j < m; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += (u[j][k]*u[i][k])\r\n                    for (k=l; k < n; k++)\r\n                        u[j][k]+=s*e[k]\r\n                }\r\n            }\r\n            y= Math.abs(q[i])+Math.abs(e[i]);\r\n            if (y>x)\r\n                x=y;\r\n        }\r\n\r\n        // accumulation of right hand gtransformations\r\n        for (i = n-1; i !== -1; i+= -1)\r\n        {\r\n            if (g !== 0.0)\r\n            {\r\n                h= g*u[i][i+1];\r\n                for (j=l; j < n; j++)\r\n                    v[j][i]=u[i][j]/h\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += u[i][k]*v[k][j]\r\n                    for (k=l; k < n; k++)\r\n                        v[k][j]+=(s*v[k][i])\r\n                }\r\n            }\r\n            for (j=l; j < n; j++)\r\n            {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g= e[i];\r\n            l= i\r\n        }\r\n\r\n        // accumulation of left hand transformations\r\n        for (i=n-1; i !== -1; i+= -1)\r\n        {\r\n            l= i+1;\r\n            g= q[i];\r\n            for (j=l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g !== 0.0)\r\n            {\r\n                h= u[i][i]*g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n                }\r\n                for (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n            }\r\n            else\r\n                for (j=i; j < m; j++) u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n\r\n        // diagonalization of the bidiagonal form\r\n        prec= prec*x;\r\n        for (k=n-1; k !== -1; k+= -1)\r\n        {\r\n            for (var iteration=0; iteration < itmax; iteration++)\r\n            {// test f splitting\r\n                var test_convergence = false;\r\n                for (l=k; l !== -1; l+= -1)\r\n                {\r\n                    if (Math.abs(e[l]) <= prec){\r\n                        test_convergence= true;\r\n                        break\r\n                    }\r\n                    if (Math.abs(q[l-1]) <= prec)\r\n                        break\r\n                }\r\n                if (!test_convergence){\r\n                    // cancellation of e[l] if l>0\r\n                    c= 0.0;\r\n                    s= 1.0;\r\n                    var l1= l-1;\r\n                    for (i =l; i<k+1; i++)\r\n                    {\r\n                        f= s*e[i];\r\n                        e[i]= c*e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g= q[i];\r\n                        h= pythag(f,g);\r\n                        q[i]= h;\r\n                        c= g/h;\r\n                        s= -f/h;\r\n                        for (j=0; j < m; j++)\r\n                        {\r\n                            y= u[j][l1];\r\n                            z= u[j][i];\r\n                            u[j][l1] =  y*c+(z*s);\r\n                            u[j][i] = -y*s+(z*c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z= q[k];\r\n                if (l=== k){\r\n                    //convergence\r\n                    if (z<0.0)\r\n                    { //q[k] is made non-negative\r\n                        q[k]= -z;\r\n                        for (j=0; j < n; j++)\r\n                            v[j][k] = -v[j][k]\r\n                    }\r\n                    break  //break out of iteration loop and move on to next k value\r\n                }\r\n\r\n                console.assert(iteration < itmax-1, 'Error: no convergence.');\r\n\r\n                // shift from bottom 2x2 minor\r\n                x= q[l];\r\n                y= q[k-1];\r\n                g= e[k-1];\r\n                h= e[k];\r\n                f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);\r\n                g= pythag(f,1.0);\r\n                if (f < 0.0)\r\n                    f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x;\r\n                else\r\n                    f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x;\r\n                // next QR transformation\r\n                c= 1.0;\r\n                s= 1.0;\r\n                for (i=l+1; i< k+1; i++)\r\n                {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s*g;\r\n                    g = c*g;\r\n                    z = pythag(f,h);\r\n                    e[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = x*c+g*s;\r\n                    g = -x*s+g*c;\r\n                    h = y*s;\r\n                    y = y*c;\r\n                    for (j =0; j < n; j++)\r\n                    {\r\n                        x = v[j][i-1];\r\n                        z = v[j][i];\r\n                        v[j][i-1]  = x*c+z*s;\r\n                        v[j][i]  = -x*s+z*c;\r\n                    }\r\n                    z = pythag(f,h);\r\n                    q[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = c*g+s*y;\r\n                    x = -s*g+c*y;\r\n                    for (j =0; j < m; j++)\r\n                    {\r\n                        y = u[j][i-1];\r\n                        z = u[j][i];\r\n                        u[j][i-1]  = y*c+z*s;\r\n                        u[j][i]  = -y*s+z*c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n\r\n        // vt = transpose(v)\r\n        // return (u,q,vt)\r\n        for (i=0;i<q.length; i++)\r\n            if (q[i] < prec) q[i] = 0;\r\n\r\n        // sort eigenvalues\r\n        for (i=0; i< n; i++){\r\n            // writeln(q)\r\n            for (j=i-1; j >= 0; j--){\r\n                if (q[j] < q[i]){\r\n                    // writeln(i,'-',j)\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n                    for (k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n                    i = j\r\n                }\r\n            }\r\n        }\r\n        return { U:u, S:q, V:v }\r\n    }\r\n\r\n    function pca(X,npc){\r\n        var USV = svd(X);\r\n        var U = USV.U;\r\n        var S = diag(USV.S);\r\n        var V = USV.V;\r\n\r\n        // T = X*V = U*S\r\n        var pcXV = dot(X,V);\r\n        var pcUdS = dot(U,S);\r\n\r\n        // var prod = trunc(sub(pcXV,pcUdS), 1e-11);\r\n        var prod = trunc(sub(pcXV,pcUdS), 1e-12);\r\n        var zero = zeros(prod.length, prod[0].length);\r\n        console.assert(same(prod,zero), 'svd and eig ways must be the same.');\r\n        var twomost = [];\r\n        for (var ipc =0; ipc<npc; ipc++)\r\n            twomost.push(ipc);\r\n\r\n        for (var i in USV.S) {\r\n            for (var ipc =0; ipc<npc; ipc++) {\r\n                if (USV.S[i]>=USV.S[twomost[ipc]]) {\r\n                    twomost[ipc] = parseInt(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return [pcUdS,V,twomost,S] ;\r\n    }\r\n};","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, sum as d3sum} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                const dataIn = [];\r\n                const traceIndex = [];\r\n                data.forEach((t, ti) => {\r\n                    traceIndex[ti] = [];\r\n                    getArr(t).forEach(d => {\r\n                        let item = dimensionKeys.map((k) => +d[k]);\r\n                        traceIndex[ti].push(dataIn.length);\r\n                        dataIn.push(item);\r\n                    })\r\n                })\r\n                debugger\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys);\r\n                const traceData = data.map((t, ti) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: getName(t),\r\n                        x: traceIndex[ti].map(i => solution[i][0]),\r\n                        y: traceIndex[ti].map(i => solution[i][1]),\r\n                    }\r\n                })\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`}\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`}\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let matrix = pca.scale(dataIn, true, true);\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    console.log(B)\r\n    let solution = dataIn.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        dd.data = d;\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = dimensions.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n    debugger\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                let segmentKeys = data.map(t=>getName(t));\r\n                let len = d3min(data,t=>getArr(t).length);\r\n                // const dataIn = dimensionKeys.map(k=>d3range(0,len));\r\n                // data.forEach((t, ti) => {\r\n                //     let _d = getArr(t);\r\n                //     for (let i=0; i<len;i++){\r\n                //         let d = _d[i];\r\n                //         dimensionKeys.forEach((k,di) => {\r\n                //             dataIn[di][i][ti] = +d[k]\r\n                //         });\r\n                //     }\r\n                // })\r\n                const dataIn = [];\r\n                data.forEach((t, ti) => {\r\n                    let _d = getArr(t);\r\n                    for (let i=0; i<len;i++){\r\n                        let d = _d[i];\r\n                        let item = dimensionKeys.map((k) => +d[k]);\r\n                        dataIn.push(item);\r\n                    }\r\n                })\r\n\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys, segmentKeys, len);\r\n                const seg = d3range(0,len);\r\n                const traceData = dimensionKeys.map((d, di) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: d,\r\n                        x: seg.map(i => solution[di*len+i][0]),\r\n                        y: seg.map(i => solution[di*len+i][1]),\r\n                    }\r\n                })\r\n                debugger\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`}\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`}\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions,segment, len){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let _matrix = pca.scale(dataIn, true, true);\r\n\r\n    // invert data hew\r\n    let matrix = []\r\n    for (let di=0; di<dimensions.length; di++) {\r\n        for (let i=0; i < len; i++) {\r\n            matrix[di*len+i] = segment.map((s,si)=>_matrix[si*len+i][di]);\r\n        }\r\n    }\r\n    debugger\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    console.log(B)\r\n    let solution = matrix.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = segment.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n    debugger\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\n// import {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum} from 'd3';\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,r:10},\r\n    xaxis: {\r\n        ticks: '',\r\n        // side: 'top',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    },\r\n    yaxis: {\r\n        ticks: '',\r\n        ticksuffix: ' ',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    }\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKey})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                let segmentKeys = [];\r\n                let p = data.map((t, ti) => {\r\n                    segmentKeys.push(getName(t))\r\n                    return getArr(t).map(d=>+d[dimensionKey])\r\n                })\r\n\r\n                let annotations= [];\r\n                const z =segmentKeys.map(d=>segmentKeys.map(d=>null));\r\n                for (let i=0;i<segmentKeys.length-1;i++){\r\n                    for (let j=i+1;j<segmentKeys.length;j++){\r\n                        let xlen = p[i].length;\r\n                        let ylen = p[j].length;\r\n                        let coor = xlen<ylen?pearson(p[i],p[j]):pearson(p[j],p[i]);\r\n                        z[i][j] = Math.abs(coor);\r\n                        z[j][i] = z[i][j];\r\n\r\n                        annotations.push({\r\n                            xref: 'x1',\r\n                            yref: 'y1',\r\n                            x: segmentKeys[j],\r\n                            y: segmentKeys[i],\r\n                            text: Math.round(coor*100)/100,\r\n                            font: {\r\n                                color: 'white'\r\n                            },\r\n                            showarrow: false,\r\n                        })\r\n                    }\r\n                }\r\n\r\n                const traceData = [\r\n                    {\r\n                        type: 'heatmap',\r\n                        name: dimensionKey,\r\n                        x: segmentKeys,\r\n                        y: segmentKeys,\r\n                        z,\r\n                        zauto:false,\r\n                        zmin:0,\r\n                        zmax:1,\r\n                        hoverongaps: false,\r\n                        showscale:false,\r\n                    }\r\n                ]\r\n\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    annotations\r\n                };\r\n\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKey,data]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\n\r\n\r\n// https://gist.github.com/matt-west/6500993\r\nfunction pearson (x, y) {\r\n    const promedio = l => l.reduce((s, a) => s + a, 0) / l.length\r\n    const calc = (v, prom) => Math.sqrt(v.reduce((s, a) => (s + a * a), 0) - n * prom * prom)\r\n    let n = x.length\r\n    let nn = 0\r\n    for (let i = 0; i < n; i++, nn++) {\r\n        if ((!x[i] && x[i] !== 0) || (!y[i] && y[i] !== 0)) {\r\n            nn--\r\n            continue\r\n        }\r\n        x[nn] = x[i]\r\n        y[nn] = y[i]\r\n    }\r\n    if (n !== nn) {\r\n        x = x.splice(0, nn)\r\n        y = y.splice(0, nn)\r\n        n = nn\r\n    }\r\n    const prom_x = promedio(x), prom_y = promedio(y)\r\n    return Math.min(1,(x\r\n            .map((e, i) => ({ x: e, y: y[i] }))\r\n            .reduce((v, a) => v + a.x * a.y, 0) - n * prom_x * prom_y\r\n    ) / (calc(x, prom_x) * calc(y, prom_y)))\r\n}","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack, MenuItem} from \"@mui/material\";\r\nimport {lazy, useEffect, useState} from \"react\";\r\nimport {groups,extent as d3extent,min as d3min, max as d3max} from \"d3\";\r\n\r\n\r\n\r\n// dashboard routing\r\n// const LineChart = Loadable(lazy(() => import('../../components/viz/lineChart')));\r\n// const RibbonChart = Loadable(lazy(() => import('../../components/viz/Ribbon')));\r\nimport LineChart from \"../../components/viz/lineChart\";\r\nimport LineCharts from \"../../components/viz/lineChart/index_combine\";\r\n// import LineChart from \"../../components/viz/lineChart/subplots\";\r\nimport RibbonChart from \"../../components/viz/Ribbon\";\r\nimport SplomChart from \"../../components/viz/Splom\";\r\nimport PCAChart from \"../../components/viz/PCA\";\r\nimport PCAChart2 from \"../../components/viz/PCA/index_reverse\";\r\nimport SimChart from \"../../components/viz/similarity\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [dimensionDetail,setDimensionDetail] = useState({});\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'z',key:null,is3D:true},\r\n        {label:'color',key:null},\r\n        {label:'dim',key:[],is3D:true},\r\n    ]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    useEffect(()=>{\r\n        const newProfile = groups(datas,d=>d.Profile);\r\n        const positionK = {};\r\n        const flatdata = [];\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d.AppName]===undefined){\r\n                    positionK[d.AppName] = app.length;\r\n                    app[positionK[d.AppName]]=[d.AppName,[]];\r\n                }\r\n                app[positionK[d.AppName]][1].push(d);\r\n                flatdata.push(d.data);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        const dimensionDetail = {};\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            let dim = Object.keys(datas[0].data[0]);\r\n            dim.forEach(k=>{\r\n                dimensionDetail[k] = [+Infinity,-Infinity];\r\n                const ex = flatdata.map(d=>d3extent(d,d=>+d[k]));\r\n                dimensionDetail[k] = [d3min(ex,d=>d[0]),d3max(ex,d=>d[1])];\r\n            })\r\n            setDimension(dim)\r\n        }else\r\n            setDimension([]);\r\n        setDimensionDetail(dimensionDetail);\r\n    },[datas]);\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    const largeLayout = ((plotType==='markers')||(plotType==='lines2')||(plotType==='lines')||(plotType==='Splom'));\r\n    const renderAxis = ()=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200,display:a.is3D ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n\r\n            case 'Splom':\r\n            case 'pca':\r\n            case 'pca_2':\r\n            case 'sim':\r\n                return <Autocomplete value={axis[4].key}\r\n                                     multiple\r\n                                     size={\"small\"}\r\n                                     options={dimension}\r\n                                     onChange={(event, newValue) => onChangeAxis(4, newValue)}\r\n                                     renderInput={(params) => <TextField {...params} label={axis[4].label}/>}/>\r\n            default:\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200,display:a.label==='color' ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n        }\r\n    }\r\n    const renderPlots = ([profile,pData])=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return <Grid container>\r\n                    {pData.map(([app, appData],i) => <Grid key={`${profile} ${app}`} item xs={4}\r\n                                                           sx={{height: 200, mb: 3}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                        {appData[0] &&\r\n                            <LineChart data={appData[0]?.data} xKey={axis[0].key} yKey={axis[1].key}\r\n                                       cKey={axis[3].key}\r\n                                       colorDomain={dimensionDetail[axis[3].key]}\r\n                                       getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                       getName={([k,t])=>k}\r\n                                       mode={plotType}\r\n                                       showscale={i===2}\r\n                            />}\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'lines2':\r\n                return <LineCharts\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    xKey={axis[0].key}\r\n                    yKey={axis[1].key}\r\n                />\r\n            case 'Splom':\r\n                return <SplomChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca':\r\n                return <PCAChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca_2':\r\n                return <PCAChart2\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'sim':\r\n                return <Grid container>\r\n                    {axis[4].key.map((d) => <Grid key={d} item xs={6} sx={{height: 200, mb: 3}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{d}</Typography>\r\n                        <SimChart getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                       getName={([k,t])=>k}\r\n                                       data={pData}\r\n                                       dimensionKey={d}\r\n                            />\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'Ribbon':\r\n                return <RibbonChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    xKey={axis[0].key}\r\n                    yKey={axis[1].key}\r\n                    zKey={axis[2].key}\r\n                    cKey={axis[3].key}\r\n                />\r\n            default:\r\n                return <>Not support yet</>\r\n        }\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines2'}>\r\n                            Line chart (combine)\r\n                        </MenuItem>\r\n                        <MenuItem value={'Ribbon'}>\r\n                            3D scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'Splom'}>\r\n                            Splom\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca'}>\r\n                            PCA\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca_2'}>\r\n                            PCA (revert)\r\n                        </MenuItem>\r\n                        <MenuItem value={'sim'}>\r\n                            Similarity matrix\r\n                        </MenuItem>\r\n                    </TextField>\r\n                {renderAxis()}\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={largeLayout?12:6} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h3'}>{profile}</Typography>\r\n                            {\r\n                                renderPlots([profile,pData])\r\n                            }\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","domain","undefined","layout","title","text","pad","margin","t","l","b","r","data","xKey","yKey","cKey","getArr","getName","colorDomain","mode","showscale","useTransition","startTransition","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","x","y","forEach","d","push","map","plotopt","type","console","log","length","marker","color","colorscale","colorbarTitleText","colorbarThickness","cmin","cmax","style","width","height","useResizeHandler","traceData","name","zKey","z","useMemo","size","scene","xaxis","yaxis","zaxis","initLayout","hovermode","dragmode","plot_bgcolor","grid","roworder","dimensionKeys","setLayout","dimensions","k","label","values","line","i","axis","showline","zeroline","gridcolor","ticklen","PCA","mean","X","transpose","row","d3","dot","Y","col","v","zeros","j","sub","assert","w","this","scale","center","m","s","V","mul","Math","sqrt","std","pca","npc","USV","A","temp","prec","pow","tolerance","itmax","c","u","slice","n","e","q","pythag","a","abs","f","g","h","iteration","test_convergence","l1","U","S","svd","diag","pcXV","pcUdS","prod","trunc","zero","reduce","same","twomost","ipc","parseInt","DIM","dataIn","traceIndex","ti","item","matrix","pc","B","chosenPC","solution","dd","d3range","dim","xrange","d3extent","yrange","root","maxV","Infinity","feature","key","brand","maxi","cv","pc1","pc2","multiplyBrands","d3max","distance","contributeMax","d3sum","contribute","calculatePCA","round","shapes","x0","y0","x1","y1","annotations","xanchor","yanchor","font","segmentKeys","len","d3min","_d","segment","_matrix","di","si","seg","ticks","tickfont","ticksuffix","dimensionKey","p","coor","pearson","xref","yref","showarrow","zauto","zmin","zmax","hoverongaps","promedio","calc","prom","nn","splice","prom_x","prom_y","min","datas","useSelector","selectDatas","nestData","stNestData","dimension","setDimension","dimensionDetail","setDimensionDetail","plotType","setPlotType","is3D","setAxis","newProfile","groups","Profile","positionK","flatdata","newdata","pd","app","Object","keys","AppName","ex","onChangeAxis","value","largeLayout","renderPlots","profile","pData","Grid","container","appData","xs","sx","mb","Typography","variant","textAlign","Splom","Ribbon","spacing","gridSpacing","Stack","direction","TextField","select","minWidth","onChange","event","target","MenuItem","Autocomplete","display","options","newValue","renderInput","params","multiple","renderAxis","Card","Box","pl"],"sourceRoot":""}