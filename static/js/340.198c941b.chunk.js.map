{"version":3,"file":"static/js/340.198c941b.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","components/viz/Ribbon/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst initData=[];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst LineChart = ({data=initData,xKey,yKey,cKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        const x=[];\r\n        const y=[];\r\n        data.forEach(d=>{\r\n            x.push(d[xKey]);\r\n            y.push(d[yKey]);\r\n        })\r\n        setPlotdata({\r\n            x,\r\n            y,\r\n        })\r\n    },[xKey,yKey,data]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            debugger\r\n            if (cKey) {\r\n                setColordata(data.map(d=>d[cKey]));\r\n            }else {\r\n                setColordata([]);\r\n            }\r\n        }else\r\n            setColordata([]);\r\n    },[data,cKey,mode])\r\n    const plotopt = [{\r\n        x:plotdata.x,\r\n        y:plotdata.y,\r\n        type: 'scatter',\r\n        colorscale: \"Portland\",\r\n        mode\r\n        // marker: {color: 'red'},\r\n    }];\r\n    if (colordata.length)\r\n        plotopt[0].marker = {color:colordata}\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst Chart = ({data=initData, getArr,getName,xKey,yKey,zKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        debugger\r\n        const traceData = data.map(t=>{\r\n            const x=[];\r\n            const y=[];\r\n            const z=[];\r\n            getArr(t).forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n                z.push(d[zKey]);\r\n            })\r\n            return{\r\n                name:getName(t),\r\n                x,\r\n                y,\r\n                z,\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[xKey,yKey,zKey,data]);\r\n    const plotopt = useMemo(()=>{\r\n        return plotdata.map(d=>({\r\n            ...d,\r\n            type: 'scatter3d',\r\n            colorscale: \"Portland\",\r\n            mode: 'markers',\r\n            marker:{size:3}\r\n        }))\r\n    },[plotdata]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={{...layout,\r\n        scene: {\r\n            xaxis: {\r\n                title: {text: xKey}\r\n            },\r\n            yaxis: {\r\n                title: {text: yKey}\r\n            },\r\n            zaxis: {\r\n                title: {text: zKey}\r\n            }\r\n        }\r\n    }} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack, MenuItem} from \"@mui/material\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {groups} from \"d3\";\r\nimport LineChart from \"../../components/viz/lineChart\";\r\nimport RibbonChart from \"../../components/viz/Ribbon\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'z',key:null,is3D:true},\r\n        {label:'color',key:null}\r\n    ]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    useEffect(()=>{\r\n        const newProfile = groups(datas,d=>d.Profile);\r\n        const positionK = {};\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d.AppName]===undefined){\r\n                    positionK[d.AppName] = app.length;\r\n                    app[positionK[d.AppName]]=[d.AppName,[]];\r\n                }\r\n                app[positionK[d.AppName]][1].push(d);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            setDimension(Object.keys(datas[0].data[0]))\r\n        }else\r\n            setDimension([])\r\n    },[datas]);\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    const is3D = ((plotType==='markers')||(plotType==='lines'));\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                        <MenuItem value={'Ribbon'}>\r\n                            3D scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca'}>\r\n                            PCA\r\n                        </MenuItem>\r\n                    </TextField>\r\n                {axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                               size={\"small\"}\r\n                                               sx={{minWidth:200,display:(a.is3D && (is3D))?'none':undefined}}\r\n                               options={dimension}\r\n                               onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                               renderInput={(params) => <TextField {...params} label={a.label}/>}/>)}\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={is3D?12:6} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h3'}>{profile}</Typography>\r\n                            {is3D&&<Grid container>\r\n                                {pData.map(([app, appData]) => <Grid key={`${profile} ${app}`} item xs={4}\r\n                                                                     sx={{height: 200, mb: 3}}>\r\n                                    <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                                    {appData[0] &&\r\n                                        <LineChart data={appData[0]?.data} xKey={axis[0].key} yKey={axis[1].key}\r\n                                                   cKey={axis[3].key}\r\n                                                   mode={plotType}/>}\r\n                                </Grid>)}\r\n                            </Grid>}\r\n                            {\r\n                                (plotType==='Ribbon')&&<RibbonChart\r\n                                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                    getName={([k,t])=>k}\r\n                                    data={pData} mainKey={'data'}\r\n                                    xKey={axis[0].key}\r\n                                    yKey={axis[1].key}\r\n                                    zKey={axis[2].key}\r\n                                    cKey={axis[3].key}\r\n                                />\r\n                            }\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","layout","title","text","pad","margin","t","l","b","r","data","xKey","yKey","cKey","mode","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","x","y","forEach","d","push","map","plotopt","type","colorscale","length","marker","color","style","width","height","useResizeHandler","getArr","getName","zKey","traceData","z","name","useMemo","size","scene","xaxis","yaxis","zaxis","datas","useSelector","selectDatas","nestData","stNestData","dimension","setDimension","plotType","setPlotType","label","key","is3D","axis","setAxis","newProfile","groups","Profile","positionK","newdata","p","pd","app","Object","keys","k","undefined","AppName","Grid","container","spacing","gridSpacing","item","xs","Stack","direction","TextField","select","sx","minWidth","value","onChange","event","target","MenuItem","a","i","Autocomplete","display","options","newValue","renderInput","params","profile","pData","Card","Box","pl","Typography","variant","appData","mb","textAlign","Ribbon","mainKey"],"sourceRoot":""}