{"version":3,"file":"static/js/133.4740fd91.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","components/viz/lineChart/index_combine.js","components/viz/Ribbon/index.js","components/viz/Splom/index.js","components/viz/PCA/PCA.js","components/viz/PCA/index.js","components/viz/PCA/index_reverse.js","components/viz/similarity/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:30,r:30}}\r\nconst LineChart = ({data=initData,xKey,domain,yKey,cKey,getArr,getName,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const x=[];\r\n            const y=[];\r\n            data.forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n            })\r\n            setPlotdata({\r\n                x,\r\n                y,\r\n            })\r\n        })\r\n    },[xKey,yKey,data]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            debugger\r\n            if (cKey) {\r\n                setColordata(data.map(d=>d[cKey]));\r\n            }else {\r\n                setColordata([]);\r\n            }\r\n        }else\r\n            setColordata([]);\r\n    },[data,cKey,mode])\r\n    const plotopt = [{\r\n        x:plotdata.x,\r\n        y:plotdata.y,\r\n        type: 'scatter',\r\n        mode\r\n        // marker: {color: 'red'},\r\n    }];\r\n    // console.log(colorDomain)\r\n    if (colordata.length)\r\n        plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n            colorbarThickness:5,\r\n            showscale,\r\n            cmin:colorDomain[0],cmax:colorDomain[1]\r\n        }\r\n    const _layout={...layout,\r\n        yaxis:{\r\n        title: yKey,\r\n        autorange:false,\r\n            range:domain[yKey]\r\n        },\r\n        xaxis:{\r\n            title:xKey\r\n        }\r\n    }\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={_layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:30}}\r\nconst LineChart = ({data=initData,getArr,getName,xKey,yKey,cKey,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const traceData = data.map(t=>{\r\n                const x=[];\r\n                const y=[];\r\n                getArr(t).forEach(d=>{\r\n                    x.push(d[xKey]);\r\n                    y.push(d[yKey]);\r\n                })\r\n                return{\r\n                    name:getName(t),\r\n                    x,\r\n                    y,\r\n                    type: 'scatter',\r\n                }\r\n            })\r\n            setPlotdata(traceData)\r\n        })\r\n    },[xKey,yKey,data]);\r\n    // useEffect(()=>{\r\n    //     if (mode==='markers'){\r\n    //         debugger\r\n    //         if (cKey) {\r\n    //             setColordata(data.map(d=>d[cKey]));\r\n    //         }else {\r\n    //             setColordata([]);\r\n    //         }\r\n    //     }else\r\n    //         setColordata([]);\r\n    // },[data,cKey,mode])\r\n    // const plotopt = [{\r\n    //     x:plotdata.x,\r\n    //     y:plotdata.y,\r\n    //     type: 'scatter',\r\n    //     mode\r\n    //     // marker: {color: 'red'},\r\n    // }];\r\n    // console.log(colorDomain)\r\n    // if (colordata.length)\r\n    //     plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n    //         colorbarThickness:5,\r\n    //         showscale,\r\n    //         cmin:colorDomain[0],cmax:colorDomain[1]\r\n    // }\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst Chart = ({data=initData, getArr,getName,xKey,yKey,zKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        debugger\r\n        const traceData = data.map(t=>{\r\n            const x=[];\r\n            const y=[];\r\n            const z=[];\r\n            getArr(t).forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n                z.push(d[zKey]);\r\n            })\r\n            return{\r\n                name:getName(t),\r\n                x,\r\n                y,\r\n                z,\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[xKey,yKey,zKey,data]);\r\n    const plotopt = useMemo(()=>{\r\n        return plotdata.map(d=>({\r\n            ...d,\r\n            type: 'scatter3d',\r\n            colorscale: \"Portland\",\r\n            mode: 'markers',\r\n            marker:{size:3}\r\n        }))\r\n    },[plotdata]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={{...layout,\r\n        scene: {\r\n            xaxis: {\r\n                title: {text: xKey}\r\n            },\r\n            yaxis: {\r\n                title: {text: yKey}\r\n            },\r\n            zaxis: {\r\n                title: {text: zKey}\r\n            }\r\n        }\r\n    }} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n    hovermode:'closest',\r\n    dragmode:'select',\r\n    plot_bgcolor:'rgba(240,240,240, 0.95)',\r\n    grid:{roworder:'bottom to top'}\r\n};\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    useEffect(()=>{\r\n        const traceData = data.map(t=>{\r\n            const dimensions = dimensionKeys.map(k=> ({label:k, values:[]}));\r\n            getArr(t).forEach(d=>{\r\n                dimensions.forEach((k)=>{\r\n                    k.values.push(d[k.label]);\r\n                });\r\n            })\r\n            return {\r\n                type: 'splom',\r\n                name:getName(t),\r\n                dimensions,\r\n                marker: {\r\n                    size: 5,\r\n                    line: {\r\n                        color: 'white',\r\n                        width: 0.5\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[dimensionKeys,data]);\r\n    useEffect(()=>{\r\n        const layout = {...initLayout};\r\n        dimensionKeys.forEach((k,i)=> {\r\n            layout[`xaxis${i}`] = axis()\r\n            layout[`yaxis${i}`] = axis()\r\n        })\r\n        setLayout(layout)\r\n    },[dimensionKeys])\r\n    const axis = () => ({\r\n        showline:false,\r\n        zeroline:false,\r\n        gridcolor:'#ffff',\r\n        ticklen:4\r\n    })\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import * as d3 from 'd3'\r\nexport const PCA = function(){\r\n    this.scale = scale;\r\n    this.pca = pca;\r\n\r\n    function mean(X){\r\n        // mean by col\r\n        var T = transpose(X);\r\n        return T.map(function(row){ return d3.sum(row) / X.length; });\r\n    }\r\n\r\n    function transpose(X){\r\n        return d3.range(X[0].length).map(function(i){\r\n            return X.map(function(row){ return row[i]; });\r\n        });\r\n    }\r\n\r\n    function dot(X,Y){\r\n        return X.map(function(row){\r\n            return transpose(Y).map(function(col){\r\n                return d3.sum(d3.zip(row,col).map(function(v){\r\n                    return v[0]*v[1];\r\n                }));\r\n            });\r\n        });\r\n    }\r\n\r\n    function diag(X){\r\n        return d3.range(X.length).map(function(i){\r\n            return d3.range(X.length).map(function(j){ return (i === j) ? X[i] : 0; });\r\n        });\r\n    }\r\n\r\n    function zeros(i,j){\r\n        return d3.range(i).map(function(row){\r\n            return d3.range(j).map(function(){ return 0; });\r\n        });\r\n    }\r\n\r\n    function trunc(X,d){\r\n        return X.map(function(row){\r\n            return row.map(function(x){ return (x < d) ? 0 : x; });\r\n        });\r\n    }\r\n\r\n    function same(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0] === w[1]; });\r\n        }).map(function(row){\r\n            return row.reduce(function(x,y){ return x*y; });\r\n        }).reduce(function(x,y){ return x*y; });\r\n    }\r\n\r\n    function std(X){\r\n        var m = mean(X);\r\n        return sqrt(mean(mul(X,X)));//, mul(m,m));\r\n    }\r\n\r\n    function sqrt(V){\r\n        return V.map(function(x){ return Math.sqrt(x); });\r\n    }\r\n\r\n    function mul(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]*v[1];\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0]*w[1]; });\r\n        });\r\n    }\r\n\r\n    function sub(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]-v[1];\r\n            else return d3.zip(v[0],v[1]).map(function(w){ return w[0]-w[1]; });\r\n        });\r\n    }\r\n\r\n    function div(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){ return v[1]!==0 ? v[0]/(v[1]): 0; });\r\n\r\n    }\r\n\r\n    function scale(X, center, scale){\r\n        // compatible with R scale()\r\n        if (center){\r\n            var m = mean(X);\r\n            X = X.map(function(row){ return sub(row, m); });\r\n        }\r\n\r\n        if (scale){\r\n            var s = std(X);\r\n            X = X.map(function(row){ return div(row, s); });\r\n        }\r\n        return X;\r\n    }\r\n\r\n    // translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n    function svd(A){\r\n        var temp;\r\n        // Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n        var prec = Math.pow(2,-52); // assumes double prec\r\n        var tolerance = 1.e-64/prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n\r\n        var u = A.map(function(row){ return row.slice(0); });\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n\r\n        console.assert(m >= n, 'Need more rows than columns');\r\n\r\n        var e = d3.range(n).map(function(){ return 0; });\r\n        var q = d3.range(n).map(function(){ return 0; });\r\n        var v = zeros(n,n);\r\n\r\n        function pythag(a,b){\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a*Math.sqrt(1.0+(b*b/a/a));\r\n            else if (b === 0)\r\n                return a;\r\n            return b*Math.sqrt(1.0+(a*a/b/b));\r\n        }\r\n\r\n        // Householder's reduction to bidiagonal form\r\n        var f = 0;\r\n        var g = 0;\r\n        var h = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n        var z = 0;\r\n        var s = 0;\r\n\r\n        for (i=0; i < n; i++)\r\n        {\r\n            e[i]= g;\r\n            s= 0.0;\r\n            l= i+1;\r\n            for (j=i; j < m; j++)\r\n                s += (u[j][i]*u[j][i]);\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g-s;\r\n                u[i][i]=f-g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s= 0.0;\r\n                    for (k=i; k < m; k++)\r\n                        s += u[k][i]*u[k][j]\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++)\r\n                        u[k][j]+=f*u[k][i]\r\n                }\r\n            }\r\n            q[i]= g;\r\n            s= 0.0;\r\n            for (j=l; j < n; j++)\r\n                s= s + u[i][j]*u[i][j]\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i+1];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g - s;\r\n                u[i][i+1] = f-g;\r\n                for (j=l; j < n; j++) e[j]= u[i][j]/h\r\n                for (j=l; j < m; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += (u[j][k]*u[i][k])\r\n                    for (k=l; k < n; k++)\r\n                        u[j][k]+=s*e[k]\r\n                }\r\n            }\r\n            y= Math.abs(q[i])+Math.abs(e[i]);\r\n            if (y>x)\r\n                x=y;\r\n        }\r\n\r\n        // accumulation of right hand gtransformations\r\n        for (i = n-1; i !== -1; i+= -1)\r\n        {\r\n            if (g !== 0.0)\r\n            {\r\n                h= g*u[i][i+1];\r\n                for (j=l; j < n; j++)\r\n                    v[j][i]=u[i][j]/h\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += u[i][k]*v[k][j]\r\n                    for (k=l; k < n; k++)\r\n                        v[k][j]+=(s*v[k][i])\r\n                }\r\n            }\r\n            for (j=l; j < n; j++)\r\n            {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g= e[i];\r\n            l= i\r\n        }\r\n\r\n        // accumulation of left hand transformations\r\n        for (i=n-1; i !== -1; i+= -1)\r\n        {\r\n            l= i+1;\r\n            g= q[i];\r\n            for (j=l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g !== 0.0)\r\n            {\r\n                h= u[i][i]*g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n                }\r\n                for (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n            }\r\n            else\r\n                for (j=i; j < m; j++) u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n\r\n        // diagonalization of the bidiagonal form\r\n        prec= prec*x;\r\n        for (k=n-1; k !== -1; k+= -1)\r\n        {\r\n            for (var iteration=0; iteration < itmax; iteration++)\r\n            {// test f splitting\r\n                var test_convergence = false;\r\n                for (l=k; l !== -1; l+= -1)\r\n                {\r\n                    if (Math.abs(e[l]) <= prec){\r\n                        test_convergence= true;\r\n                        break\r\n                    }\r\n                    if (Math.abs(q[l-1]) <= prec)\r\n                        break\r\n                }\r\n                if (!test_convergence){\r\n                    // cancellation of e[l] if l>0\r\n                    c= 0.0;\r\n                    s= 1.0;\r\n                    var l1= l-1;\r\n                    for (i =l; i<k+1; i++)\r\n                    {\r\n                        f= s*e[i];\r\n                        e[i]= c*e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g= q[i];\r\n                        h= pythag(f,g);\r\n                        q[i]= h;\r\n                        c= g/h;\r\n                        s= -f/h;\r\n                        for (j=0; j < m; j++)\r\n                        {\r\n                            y= u[j][l1];\r\n                            z= u[j][i];\r\n                            u[j][l1] =  y*c+(z*s);\r\n                            u[j][i] = -y*s+(z*c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z= q[k];\r\n                if (l=== k){\r\n                    //convergence\r\n                    if (z<0.0)\r\n                    { //q[k] is made non-negative\r\n                        q[k]= -z;\r\n                        for (j=0; j < n; j++)\r\n                            v[j][k] = -v[j][k]\r\n                    }\r\n                    break  //break out of iteration loop and move on to next k value\r\n                }\r\n\r\n                console.assert(iteration < itmax-1, 'Error: no convergence.');\r\n\r\n                // shift from bottom 2x2 minor\r\n                x= q[l];\r\n                y= q[k-1];\r\n                g= e[k-1];\r\n                h= e[k];\r\n                f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);\r\n                g= pythag(f,1.0);\r\n                if (f < 0.0)\r\n                    f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x;\r\n                else\r\n                    f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x;\r\n                // next QR transformation\r\n                c= 1.0;\r\n                s= 1.0;\r\n                for (i=l+1; i< k+1; i++)\r\n                {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s*g;\r\n                    g = c*g;\r\n                    z = pythag(f,h);\r\n                    e[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = x*c+g*s;\r\n                    g = -x*s+g*c;\r\n                    h = y*s;\r\n                    y = y*c;\r\n                    for (j =0; j < n; j++)\r\n                    {\r\n                        x = v[j][i-1];\r\n                        z = v[j][i];\r\n                        v[j][i-1]  = x*c+z*s;\r\n                        v[j][i]  = -x*s+z*c;\r\n                    }\r\n                    z = pythag(f,h);\r\n                    q[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = c*g+s*y;\r\n                    x = -s*g+c*y;\r\n                    for (j =0; j < m; j++)\r\n                    {\r\n                        y = u[j][i-1];\r\n                        z = u[j][i];\r\n                        u[j][i-1]  = y*c+z*s;\r\n                        u[j][i]  = -y*s+z*c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n\r\n        // vt = transpose(v)\r\n        // return (u,q,vt)\r\n        for (i=0;i<q.length; i++)\r\n            if (q[i] < prec) q[i] = 0;\r\n\r\n        // sort eigenvalues\r\n        for (i=0; i< n; i++){\r\n            // writeln(q)\r\n            for (j=i-1; j >= 0; j--){\r\n                if (q[j] < q[i]){\r\n                    // writeln(i,'-',j)\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n                    for (k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n                    i = j\r\n                }\r\n            }\r\n        }\r\n        return { U:u, S:q, V:v }\r\n    }\r\n\r\n    function pca(X,npc){\r\n        var USV = svd(X);\r\n        var U = USV.U;\r\n        var S = diag(USV.S);\r\n        var V = USV.V;\r\n\r\n        // T = X*V = U*S\r\n        var pcXV = dot(X,V);\r\n        var pcUdS = dot(U,S);\r\n\r\n        // var prod = trunc(sub(pcXV,pcUdS), 1e-11);\r\n        var prod = trunc(sub(pcXV,pcUdS), 1e-12);\r\n        var zero = zeros(prod.length, prod[0].length);\r\n        console.assert(same(prod,zero), 'svd and eig ways must be the same.');\r\n        var twomost = [];\r\n        for (var ipc =0; ipc<npc; ipc++)\r\n            twomost.push(ipc);\r\n\r\n        for (var i in USV.S) {\r\n            for (var ipc =0; ipc<npc; ipc++) {\r\n                if (USV.S[i]>=USV.S[twomost[ipc]]) {\r\n                    twomost[ipc] = parseInt(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return [pcUdS,V,twomost,S] ;\r\n    }\r\n};","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, sum as d3sum} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                const dataIn = [];\r\n                const traceIndex = [];\r\n                data.forEach((t, ti) => {\r\n                    traceIndex[ti] = [];\r\n                    getArr(t).forEach(d => {\r\n                        let item = dimensionKeys.map((k) => +d[k]);\r\n                        traceIndex[ti].push(dataIn.length);\r\n                        dataIn.push(item);\r\n                    })\r\n                })\r\n                debugger\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys);\r\n                const traceData = data.map((t, ti) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: getName(t),\r\n                        x: traceIndex[ti].map(i => solution[i][0]),\r\n                        y: traceIndex[ti].map(i => solution[i][1]),\r\n                    }\r\n                })\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`}\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`}\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let matrix = pca.scale(dataIn, true, true);\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    console.log(B)\r\n    let solution = dataIn.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        dd.data = d;\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = dimensions.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n    debugger\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                let segmentKeys = data.map(t=>getName(t));\r\n                let len = d3min(data,t=>getArr(t).length);\r\n                // const dataIn = dimensionKeys.map(k=>d3range(0,len));\r\n                // data.forEach((t, ti) => {\r\n                //     let _d = getArr(t);\r\n                //     for (let i=0; i<len;i++){\r\n                //         let d = _d[i];\r\n                //         dimensionKeys.forEach((k,di) => {\r\n                //             dataIn[di][i][ti] = +d[k]\r\n                //         });\r\n                //     }\r\n                // })\r\n                const dataIn = [];\r\n                data.forEach((t, ti) => {\r\n                    let _d = getArr(t);\r\n                    for (let i=0; i<len;i++){\r\n                        let d = _d[i];\r\n                        let item = dimensionKeys.map((k) => +d[k]);\r\n                        dataIn.push(item);\r\n                    }\r\n                })\r\n\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys, segmentKeys, len);\r\n                const seg = d3range(0,len);\r\n                const traceData = dimensionKeys.map((d, di) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: d,\r\n                        x: seg.map(i => solution[di*len+i][0]),\r\n                        y: seg.map(i => solution[di*len+i][1]),\r\n                    }\r\n                })\r\n                debugger\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`}\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`}\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions,segment, len){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let _matrix = pca.scale(dataIn, true, true);\r\n\r\n    // invert data hew\r\n    let matrix = []\r\n    for (let di=0; di<dimensions.length; di++) {\r\n        for (let i=0; i < len; i++) {\r\n            matrix[di*len+i] = segment.map((s,si)=>_matrix[si*len+i][di]);\r\n        }\r\n    }\r\n    debugger\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    console.log(B)\r\n    let solution = matrix.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = segment.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n    debugger\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\n// import {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum} from 'd3';\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,r:10},\r\n    xaxis: {\r\n        ticks: '',\r\n        // side: 'top',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    },\r\n    yaxis: {\r\n        ticks: '',\r\n        ticksuffix: ' ',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    }\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKey})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                let segmentKeys = [];\r\n                let p = data.map((t, ti) => {\r\n                    segmentKeys.push(getName(t))\r\n                    return getArr(t).map(d=>+d[dimensionKey])\r\n                })\r\n\r\n                let annotations= [];\r\n                const z =segmentKeys.map(d=>segmentKeys.map(d=>null));\r\n                z[segmentKeys.length-1][segmentKeys.length-1] = 1\r\n                for (let i=0;i<segmentKeys.length-1;i++){\r\n                    z[i][i] = 1\r\n                    for (let j=i+1;j<segmentKeys.length;j++){\r\n                        let xlen = p[i].length;\r\n                        let ylen = p[j].length;\r\n                        let coor = xlen<ylen?pearson(p[i],p[j]):pearson(p[j],p[i]);\r\n                        z[i][j] = Math.abs(coor);\r\n                        z[j][i] = z[i][j];\r\n                        if (z[i][j]>1)\r\n                            debugger\r\n                        annotations.push({\r\n                            xref: 'x1',\r\n                            yref: 'y1',\r\n                            x: segmentKeys[j],\r\n                            y: segmentKeys[i],\r\n                            text: Math.round(coor*100)/100,\r\n                            font: {\r\n                                color: 'white'\r\n                            },\r\n                            showarrow: false,\r\n                        })\r\n                    }\r\n                }\r\n\r\n                const traceData = [\r\n                    {\r\n                        type: 'heatmap',\r\n                        name: dimensionKey,\r\n                        x: segmentKeys,\r\n                        y: segmentKeys,\r\n                        z,\r\n                        zauto:false,\r\n                        zmin:0,\r\n                        zmax:1,\r\n                        hoverongaps: false,\r\n                        showscale:false,\r\n                    }\r\n                ]\r\n\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    annotations\r\n                };\r\n\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKey,data]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\n\r\n\r\n// https://gist.github.com/matt-west/6500993\r\n// function pearson (x, y) {\r\n//     const promedio = l => l.reduce((s, a) => s + a, 0) / l.length\r\n//     const calc = (v, prom) => Math.sqrt(v.reduce((s, a) => (s + a * a), 0) - n * prom * prom)\r\n//     let n = x.length\r\n//     let nn = 0\r\n//     for (let i = 0; i < n; i++, nn++) {\r\n//         if ((!x[i] && x[i] !== 0) || (!y[i] && y[i] !== 0)) {\r\n//             nn--\r\n//             continue\r\n//         }\r\n//         x[nn] = x[i]\r\n//         y[nn] = y[i]\r\n//     }\r\n//     if (n !== nn) {\r\n//         x = x.splice(0, nn)\r\n//         y = y.splice(0, nn)\r\n//         n = nn\r\n//     }\r\n//     const prom_x = promedio(x), prom_y = promedio(y)\r\n//     return Math.min(1,(x\r\n//             .map((e, i) => ({ x: e, y: y[i] }))\r\n//             .reduce((v, a) => v + a.x * a.y, 0) - n * prom_x * prom_y\r\n//     ) / (calc(x, prom_x) * calc(y, prom_y)))\r\n// }\r\n\r\n/**\r\n * calculates pearson correlation\r\n * @param {number[]} d1\r\n * @param {number[]} d2\r\n */\r\nexport function pearson(d1, d2) {\r\n    let { min, pow, sqrt } = Math\r\n    let add = (a, b) => a + b\r\n    let n = min(d1.length, d2.length)\r\n    if (n === 0) {\r\n        return 0\r\n    }\r\n    [d1, d2] = [d1.slice(0, n), d2.slice(0, n)]\r\n    let [sum1, sum2] = [d1, d2].map(l => l.reduce(add))\r\n    let [pow1, pow2] = [d1, d2].map(l => l.reduce((a, b) => a + pow(b, 2), 0))\r\n    let mulSum = d1.map((n, i) => n * d2[i]).reduce(add)\r\n    let dense = sqrt((pow1 - pow(sum1, 2) / n) * (pow2 - pow(sum2, 2) / n))\r\n    if (dense === 0) {\r\n        return 0\r\n    }\r\n    return (mulSum - (sum1 * sum2 / n)) / dense\r\n}","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack, MenuItem, ToggleButton} from \"@mui/material\";\r\nimport {lazy, useEffect, useState} from \"react\";\r\nimport {groups,extent as d3extent,min as d3min, max as d3max} from \"d3\";\r\n\r\n\r\n\r\n// dashboard routing\r\n// const LineChart = Loadable(lazy(() => import('../../components/viz/lineChart')));\r\n// const RibbonChart = Loadable(lazy(() => import('../../components/viz/Ribbon')));\r\nimport LineChart from \"../../components/viz/lineChart\";\r\nimport LineCharts from \"../../components/viz/lineChart/index_combine\";\r\n// import LineChart from \"../../components/viz/lineChart/subplots\";\r\nimport RibbonChart from \"../../components/viz/Ribbon\";\r\nimport SplomChart from \"../../components/viz/Splom\";\r\nimport PCAChart from \"../../components/viz/PCA\";\r\nimport PCAChart2 from \"../../components/viz/PCA/index_reverse\";\r\nimport SimChart from \"../../components/viz/similarity\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [isSwap,setIsSwap] = useState(false);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [dimensionDetail,setDimensionDetail] = useState({});\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'z',key:null,is3D:true},\r\n        {label:'color',key:null},\r\n        {label:'dim',key:[],is3D:true},\r\n    ]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    function handleNestData(isSwap,datas){\r\n        const ROW = isSwap?'Profile':'AppName';\r\n        const COL = isSwap?'AppName':'Profile';\r\n        const newProfile = groups(datas,d=>d[ROW]);\r\n        const positionK = {};\r\n        const flatdata = [];\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d[COL]]===undefined){\r\n                    positionK[d[COL]] = app.length;\r\n                    app[positionK[d[COL]]]=[d[COL],[]];\r\n                }\r\n                app[positionK[d[COL]]][1].push(d);\r\n                flatdata.push(d.data);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        return {flatdata}\r\n    }\r\n    useEffect(()=>{\r\n        const {flatdata} = handleNestData(isSwap,datas);\r\n        const dimensionDetail = {};\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            let dim = Object.keys(datas[0].data[0]);\r\n            dim.forEach(k=>{\r\n                dimensionDetail[k] = [+Infinity,-Infinity];\r\n                const ex = flatdata.map(d=>d3extent(d,d=>+d[k]));\r\n                dimensionDetail[k] = [d3min(ex,d=>d[0]),d3max(ex,d=>d[1])];\r\n            })\r\n            setDimension(dim)\r\n        }else\r\n            setDimension([]);\r\n        setDimensionDetail(dimensionDetail);\r\n    },[isSwap,datas]);\r\n\r\n\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    const largeLayout = ((plotType==='markers')||(plotType==='lines2')||(plotType==='lines')||(plotType==='Splom'));\r\n    const renderAxis = ()=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     getOptionLabel={d=>d}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200,display:a.is3D ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n\r\n            case 'Splom':\r\n            case 'pca':\r\n            case 'pca_2':\r\n            case 'sim':\r\n                return <Autocomplete value={axis[4].key}\r\n                                     multiple\r\n                                     getOptionLabel={d=>d}\r\n                                     size={\"small\"}\r\n                                     options={dimension}\r\n                                     onChange={(event, newValue) => onChangeAxis(4, newValue)}\r\n                                     renderInput={(params) => <TextField {...params} label={axis[4].label}/>}/>\r\n            default:\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     getOptionLabel={d=>d}\r\n                                                     sx={{minWidth:200,display:a.label==='color' ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n        }\r\n    }\r\n    const renderPlots = ([profile,pData])=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return <Grid container>\r\n                    {pData.map(([app, appData],i) => <Grid key={`${profile} ${app}`} item xs={4}\r\n                                                           sx={{height: 200, mb: 3, paddingTop:2}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                        {appData[0] &&\r\n                            <LineChart data={appData[0]?.data}\r\n                                       xKey={axis[0].key}\r\n                                       yKey={axis[1].key}\r\n                                       domain={dimensionDetail}\r\n                                       cKey={axis[3].key}\r\n                                       colorDomain={dimensionDetail[axis[3].key]}\r\n                                       getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                       getName={([k,t])=>k}\r\n                                       mode={plotType}\r\n                                       showscale={i===2}\r\n                            />}\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'lines2':\r\n                return <LineCharts\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    xKey={axis[0].key}\r\n                    yKey={axis[1].key}\r\n                />\r\n            case 'Splom':\r\n                return <SplomChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca':\r\n                return <PCAChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca_2':\r\n                return <PCAChart2\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'sim':\r\n                return <Grid container>\r\n                    {axis[4].key.map((d) => <Grid key={d} item xs={6} sx={{height: 200, mb: 3}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{d}</Typography>\r\n                        <SimChart getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                       getName={([k,t])=>k}\r\n                                       data={pData}\r\n                                       dimensionKey={d}\r\n                            />\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'Ribbon':\r\n                return <RibbonChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    xKey={axis[0].key}\r\n                    yKey={axis[1].key}\r\n                    zKey={axis[2].key}\r\n                    cKey={axis[3].key}\r\n                />\r\n            default:\r\n                return <>Not support yet</>\r\n        }\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines2'}>\r\n                            Line chart (combine)\r\n                        </MenuItem>\r\n                        <MenuItem value={'Ribbon'}>\r\n                            3D scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'Splom'}>\r\n                            Splom\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca'}>\r\n                            PCA\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca_2'}>\r\n                            PCA 2\r\n                        </MenuItem>\r\n                        <MenuItem value={'sim'}>\r\n                            Similarity matrix\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    <ToggleButton value=\"app_profile\" selected={isSwap} color=\"primary\"\r\n                                  onChange={()=>setIsSwap(!isSwap)}>Swap App and Profile</ToggleButton>\r\n                    {renderAxis()}\r\n\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={largeLayout?12:6} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h3'}>{profile}</Typography>\r\n                            {\r\n                                renderPlots([profile,pData])\r\n                            }\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","layout","title","text","pad","margin","t","l","b","r","data","xKey","domain","yKey","cKey","getArr","getName","colorDomain","mode","showscale","useTransition","startTransition","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","x","y","forEach","d","push","map","plotopt","type","length","marker","color","colorscale","colorbarTitleText","colorbarThickness","cmin","cmax","_layout","yaxis","autorange","range","xaxis","style","width","height","useResizeHandler","traceData","name","zKey","z","useMemo","size","scene","zaxis","initLayout","hovermode","dragmode","plot_bgcolor","grid","roworder","dimensionKeys","setLayout","dimensions","k","label","values","line","i","axis","showline","zeroline","gridcolor","ticklen","PCA","mean","X","transpose","row","d3","dot","Y","col","v","zeros","j","sub","console","assert","w","this","scale","center","m","s","V","mul","Math","sqrt","std","pca","npc","USV","A","temp","prec","pow","tolerance","itmax","c","u","slice","n","e","q","pythag","a","abs","f","g","h","iteration","test_convergence","l1","U","S","svd","diag","pcXV","pcUdS","prod","trunc","zero","reduce","same","twomost","ipc","parseInt","DIM","dataIn","traceIndex","ti","item","matrix","pc","B","chosenPC","log","solution","dd","d3range","dim","xrange","d3extent","yrange","root","maxV","Infinity","feature","key","brand","maxi","cv","pc1","pc2","multiplyBrands","d3max","distance","contributeMax","d3sum","contribute","calculatePCA","round","shapes","x0","y0","x1","y1","annotations","xanchor","yanchor","font","segmentKeys","len","d3min","_d","segment","_matrix","di","si","seg","ticks","tickfont","ticksuffix","dimensionKey","p","coor","pearson","xref","yref","showarrow","zauto","zmin","zmax","hoverongaps","d1","d2","min","add","sum1","sum2","pow1","pow2","mulSum","dense","datas","useSelector","selectDatas","isSwap","setIsSwap","nestData","stNestData","dimension","setDimension","dimensionDetail","setDimensionDetail","plotType","setPlotType","is3D","setAxis","ROW","COL","newProfile","groups","positionK","flatdata","newdata","pd","app","Object","keys","undefined","handleNestData","ex","onChangeAxis","value","largeLayout","renderPlots","profile","pData","Grid","container","appData","xs","sx","mb","paddingTop","Typography","variant","textAlign","Splom","Ribbon","spacing","gridSpacing","Stack","direction","TextField","select","minWidth","onChange","event","target","MenuItem","ToggleButton","selected","Autocomplete","getOptionLabel","display","options","newValue","renderInput","params","multiple","renderAxis","Card","Box","pl"],"sourceRoot":""}