{"version":3,"file":"static/js/46.1b65a90a.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","components/viz/lineChart/index_combine.js","components/viz/lineChart/index_min_max.js","components/viz/lineChart/index_aggregate.js","components/viz/Ribbon/index.js","components/viz/Splom/index.js","components/viz/PCA/PCA.js","components/viz/PCA/index.js","components/viz/PCA/index_reverse.js","components/viz/similarity/index.js","components/viz/violinChart/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\nimport {isArray} from \"lodash\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:30,r:30}}\r\nconst LineChart = ({data=initData,xKey,domain,yKey,cKey,multiple,getName,colorDomain=domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            if (!multiple) {\r\n                const x = [];\r\n                const y = [];\r\n                data.forEach(d => {\r\n                    x.push(d[xKey]);\r\n                    y.push(d[yKey]);\r\n                })\r\n                setPlotdata([{\r\n                    name: getName(data),\r\n                    x,\r\n                    y,\r\n                    type: 'scatter'\r\n                }])\r\n            }else {\r\n                const plotdata = [];\r\n                data.forEach(d => {\r\n                    getData(d,(arr)=>{\r\n                        debugger\r\n                        const x = [];\r\n                        const y = [];\r\n                        arr.forEach(d => {\r\n                            x.push(d[xKey]);\r\n                            y.push(d[yKey]);\r\n                        })\r\n                        plotdata.push({\r\n                            name: getName(d),\r\n                            x,\r\n                            y,\r\n                            fill: \"tozerox\",\r\n                            type: 'scatter',\r\n                            \"legendgroup\": getName(d)\r\n                        })\r\n                    })\r\n                })\r\n                function getData(d,calback){\r\n                    if (d.data)\r\n                        return calback(d.data);\r\n                    else if (d[1]&& isArray(d[1]))\r\n                        return d[1].forEach(d=>getData(d,calback));\r\n                    else\r\n                        return false;\r\n                }\r\n                setPlotdata(plotdata)\r\n            }\r\n        })\r\n    },[xKey,yKey,data,multiple]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            if (cKey) {\r\n                setColordata([data.map(d=>d[cKey])]);\r\n            }else {\r\n                setColordata([[]]);\r\n            }\r\n        }else\r\n            setColordata([[]]);\r\n    },[data,cKey,mode])\r\n    plotdata.forEach(p=>p.mode=mode);\r\n    // console.log(colorDomain)\r\n    if (colordata.length)\r\n        plotdata.forEach((p,i)=>p.marker = {color:colordata[i], colorscale: \"Portland\",colorbarTitleText: cKey,\r\n            colorbarThickness:5,\r\n            showscale,\r\n            cmin:colorDomain[0],cmax:colorDomain[1]\r\n        });\r\n    const _layout={...layout,\r\n        yaxis:{\r\n        title: domain[yKey]?`<b>${domain[yKey].label??yKey}</b>`:'',\r\n        autorange:false,\r\n            range:domain[yKey]\r\n        },\r\n        xaxis:{\r\n            title:domain[yKey]?`<b>${domain[xKey].label??xKey}</b>`:''\r\n        }\r\n    }\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={_layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\nimport {scaleLinear} from \"d3\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:30,r:30}}\r\nconst LineChart = ({data=initData,getArr,getName,xKey,yKey,domain,mode='line',showscale})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const traceData = data.map(t=>{\r\n                const x=[];\r\n                const y=[];\r\n                getArr(t).forEach(d=>{\r\n                    x.push(d[xKey]);\r\n                    y.push(d[yKey]);\r\n                })\r\n                return{\r\n                    name:getName(t),\r\n                    x,\r\n                    y,\r\n                    type: 'scatter',\r\n                    // line: {width: 1}\r\n                }\r\n            })\r\n            setPlotdata(traceData)\r\n        })\r\n    },[xKey,yKey,data]);\r\n    // useEffect(()=>{\r\n    //     if (mode==='markers'){\r\n    //         debugger\r\n    //         if (cKey) {\r\n    //             setColordata(data.map(d=>d[cKey]));\r\n    //         }else {\r\n    //             setColordata([]);\r\n    //         }\r\n    //     }else\r\n    //         setColordata([]);\r\n    // },[data,cKey,mode])\r\n    // const plotopt = [{\r\n    //     x:plotdata.x,\r\n    //     y:plotdata.y,\r\n    //     type: 'scatter',\r\n    //     mode\r\n    //     // marker: {color: 'red'},\r\n    // }];\r\n    // console.log(colorDomain)\r\n    // if (colordata.length)\r\n    //     plotopt[0].marker = {color:colordata, colorscale: \"Portland\",colorbarTitleText: cKey,\r\n    //         colorbarThickness:5,\r\n    //         showscale,\r\n    //         cmin:colorDomain[0],cmax:colorDomain[1]\r\n    // }\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    const _layout={...layout,\r\n        yaxis:{\r\n            title: domain[yKey]?`<b>${domain[yKey].label??yKey}</b>`:'',\r\n            autoscale: false,\r\n            range: scaleLinear().domain([domain[yKey][0],domain[yKey][1]*1.01]).nice().domain()\r\n        },\r\n        xaxis:{\r\n            title:domain[yKey]?`<b>${domain[xKey].label??xKey}</b>`:''\r\n        }\r\n    }\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={_layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState, useTransition} from \"react\";\r\nimport {isArray} from \"lodash\";\r\nimport {min as d3min, max as d3max, mean as d3mean,\r\n    range as d3range, scaleOrdinal,schemeCategory10,color} from \"d3\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:30,r:30}}\r\nconst LineChart = ({data=initData,xKey,domain,yKey,getName,combile})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const d3color = scaleOrdinal().range(schemeCategory10);\r\n                const plotdata = [];\r\n                if (!combile) {\r\n                    data.forEach(d => {\r\n                        let name = getName(d);\r\n                        let fillcolor = color(d3color(name));\r\n                        fillcolor.opacity = 0.5;\r\n                        let minmax = {\r\n                            x: [],\r\n                            y: [],\r\n                            name,\r\n                            legendgroup: name,\r\n                            type: 'scatter',\r\n                            showlegend: false,\r\n                            fill: \"tozerox\",\r\n                            fillcolor: fillcolor + \"\",\r\n                            mode: \"line\",\r\n                            line: {color: \"transparent\"}\r\n                        };\r\n                        fillcolor.opacity=1\r\n                        let maxtracry = [];\r\n                        let av = {\r\n                            x: [],\r\n                            y: [],\r\n                            name,\r\n                            legendgroup: name,\r\n                            type: 'scatter',\r\n                            mode: \"line\",\r\n                            line: {color: fillcolor + \"\", width: 1}\r\n                        };\r\n                        if (d[1]) {\r\n                            const len = d3max(d[1], d => d.data.length)\r\n                            debugger\r\n                            for (let i = 0; i < len; i++) {\r\n                                let ymin = d3min(d[1], d => d.data[i]!==undefined ? d.data[i][yKey] : undefined);\r\n                                let ymax = d3max(d[1], d => d.data[i]!==undefined ? d.data[i][yKey] : undefined);\r\n                                let ymean = d3mean(d[1], d => d.data[i]!==undefined ? d.data[i][yKey] : undefined);\r\n                                let xmean = d3mean(d[1], d => d.data[i]!==undefined ? d.data[i][xKey] : undefined);\r\n                                minmax.x.push(xmean);\r\n                                minmax.y.push(ymax);\r\n                                maxtracry.push(ymin);\r\n                                av.x.push(xmean);\r\n                                av.y.push(ymean);\r\n                            }\r\n                            for (let i = len - 1; i > -1; i--) {\r\n                                minmax.x.push(minmax.x[i]);\r\n                                minmax.y.push(maxtracry[i]);\r\n                            }\r\n\r\n                            plotdata.push(minmax);\r\n                            plotdata.push(av);\r\n                        }\r\n                    })\r\n                }else {\r\n                    let fillcolor = color('#28a69b')\r\n                    fillcolor.opacity = 0.3;\r\n                    let name = 'Overall';\r\n                    let minmax = {\r\n                        x: [],\r\n                        y: [],\r\n                        name,\r\n                        legendgroup: name,\r\n                        type: 'scatter',\r\n                        showlegend: false,\r\n                        fill: \"tonexty\",\r\n                        fillcolor: fillcolor + \"\",\r\n                        mode: \"line\",\r\n                        line: {color: \"transparent\"}\r\n                    };\r\n                    fillcolor.opacity = 1;\r\n                    let av = {\r\n                        x: [],\r\n                        y: [],\r\n                        name,\r\n                        legendgroup: name,\r\n                        type: 'scatter',\r\n                        mode: \"line\",\r\n                        line: {color: fillcolor + \"\", width: 2}//,dash: 'dot'}\r\n                    };\r\n                    let maxlen = d3max(data,d=>d3max(d[1],d=>d.data.length));\r\n                    let av_arrx = d3range(0,maxlen).map(()=>[]);\r\n                    let av_arry = d3range(0,maxlen).map(()=>[]);\r\n                    plotdata.push(minmax);\r\n                    plotdata.push(av);\r\n                    data.forEach(d => {\r\n                        let name = getName(d);\r\n                        let av = {\r\n                            x: [],\r\n                            y: [],\r\n                            name,\r\n                            type: 'scatter',\r\n                            mode: \"line\",\r\n                            line: {color: d3color(name), width: 2}\r\n                        };\r\n                        if (d[1]) {\r\n                            const len = d3max(d[1], d => d.data.length)\r\n                            for (let i = 0; i < len; i++) {\r\n                                let arrx = [];\r\n                                let arr = d[1].map(d=>{\r\n                                    let it = undefined\r\n                                    if (d.data[i]!==undefined){\r\n                                        it = (d.data[i][yKey]);\r\n                                        arrx.push(d.data[i][xKey]);\r\n                                        av_arrx[i].push(d.data[i][xKey]);\r\n                                    }\r\n                                    av_arry[i].push(it);\r\n                                    return it\r\n                                })\r\n                                let ymean = d3mean(arr);\r\n                                let xmean = d3mean(arrx);\r\n                                av.x.push(xmean);\r\n                                av.y.push(ymean);\r\n                            }\r\n                            // for (let i = len - 1; i > -1; i--) {\r\n                            //     minmax.x.push(minmax.x[i]);\r\n                            //     minmax.y.push(maxtracry[i]);\r\n                            // }\r\n                            //\r\n                            // plotdata.push(minmax);\r\n                            plotdata.push(av);\r\n                        }\r\n                    })\r\n\r\n                    for (let i = 0; i < maxlen; i++) {\r\n                        let ymin = d3min(av_arry[i]);\r\n                        let ymax = d3max(av_arry[i]);\r\n                        let ymean = d3mean(av_arry[i]);\r\n                        let xmean = d3mean(av_arrx[i]);\r\n                        av.x[i]=(xmean);\r\n                        av.y[i]=(ymean);\r\n                        minmax.x[i]=(xmean);\r\n                        minmax.y[i]=(ymax);\r\n                        minmax.x[maxlen*2-1-i]=(xmean);\r\n                        minmax.y[maxlen*2-1-i]=(ymin);\r\n                    }\r\n                }\r\n                setPlotdata(plotdata)\r\n        })\r\n    },[xKey,yKey,data,combile]);\r\n    const _layout={...layout,\r\n        yaxis:{\r\n        title: domain[yKey]?`<b>${domain[yKey].label??yKey}</b>`:'',\r\n        autorange:false,\r\n            range:domain[yKey]\r\n        },\r\n        xaxis:{\r\n            title:domain[yKey]?`<b>${domain[xKey].label??xKey}</b>`:''\r\n        }\r\n    }\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={_layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useCallback, useEffect, useState, useTransition} from \"react\";\r\nimport {isArray,chunk} from \"lodash\";\r\nimport {min as d3min, max as d3max, mean as d3mean,\r\n    range as d3range, scaleOrdinal,scaleLinear, extent as d3extent,\r\n    schemeCategory10} from \"d3\";\r\n\r\nconst initData=[];\r\nconst domain=[undefined,undefined];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:30,r:30}}\r\n// Resampling , rolling\r\nconst LineChart = ({data=initData,xKey,domain,yKey,saveName,resample=\"rolling\",normalize= false,getName})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const resampleFunc = resample==='rolling'?(arr,resolution,av)=>{\r\n            for (let i=0;i<arr.length;i++){\r\n                const d = arr.slice(Math.max(0,i-resolution+1),i+1);\r\n                const xarr = [];\r\n                const yarr = [];\r\n                d.forEach(d=>{\r\n                    d[0].forEach(d=>xarr.push(d));\r\n                    d[1].forEach(d=>yarr.push(d));\r\n                })\r\n                let xmean = d3mean(xarr);\r\n                let ymean = d3mean(yarr);\r\n                av.x.push(xmean);\r\n                av.y.push(ymean);\r\n            }\r\n        }:(arr,resolution,av)=>{\r\n            chunk(arr,resolution).forEach(d=>{\r\n                const xarr = [];\r\n                const yarr = [];\r\n                d.forEach(d=>{\r\n                    d[0].forEach(d=>xarr.push(d));\r\n                    d[1].forEach(d=>yarr.push(d));\r\n                })\r\n                let xmean = d3mean(xarr);\r\n                let ymean = d3mean(yarr);\r\n                av.x.push(xmean);\r\n                av.y.push(ymean);\r\n            });\r\n    }\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            const d3color = scaleOrdinal().range(schemeCategory10);\r\n            const plotdata = [];\r\n            data.forEach((d,i) => {\r\n                let name = getName(d);\r\n                let av = {\r\n                    x: [],\r\n                    y: [],\r\n                    name,\r\n                    type: 'scatter',\r\n                    mode: \"lines+markers\",\r\n                    line: {color: d3color(name), width: 2},\r\n                    marker: {\r\n                        symbol: i,\r\n                        size:12,\r\n                        // line: {\r\n                        //     color: 'white',\r\n                        //     width: 1.5\r\n                        // }\r\n                    }\r\n                };\r\n                if (d[1]) {\r\n                    const len = d3max(d[1], d => d.data.length);\r\n                    let arr = d3range(0,len).map(()=>[[],[]]);\r\n                    for (let i = 0; i < len; i++) {\r\n                        d[1].forEach(d=>{\r\n                            let it = undefined\r\n                            if (d.data[i]!==undefined){\r\n                                it = (+d.data[i][yKey]);\r\n                                arr[i][0].push(+d.data[i][xKey]);\r\n                            }\r\n                            arr[i][1].push(it);\r\n                            return it\r\n                        })\r\n                        // let ymean = d3mean(arr);\r\n                        // let xmean = d3mean(arrx);\r\n                    }\r\n                    resampleFunc(arr,Math.max(1,len/100),av)\r\n                    //normalize x\r\n                    if (normalize) {\r\n                        const scalex = scaleLinear().domain(d3extent(av.x));\r\n                        av.x = av.x.map(d => scalex(d));\r\n                    }\r\n                    plotdata.push(av);\r\n                }\r\n            })\r\n        setPlotdata(plotdata)\r\n        })\r\n    },[xKey,yKey,data,resample,normalize]);\r\n    const customrange = domain[yKey];\r\n    const _layout={...layout,\r\n        yaxis:{\r\n            title: domain[yKey]?`<b>${domain[yKey].label??yKey}</b>`:'',\r\n            autorange:false,\r\n            range: scaleLinear().domain([customrange[0],customrange[1]+(customrange[1]-customrange[0])*.001]).nice().domain()\r\n        },\r\n        xaxis:{\r\n            title:domain[yKey]?`<b>${domain[xKey].label??xKey}${normalize? ' (normalize)':''}</b>`:''\r\n        }\r\n    }\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={_layout}\r\n                  config = {{'displaylogo': false,\r\n                      'toImageButtonOptions': {\r\n                          'format': 'png',//one of png, svg, jpeg, webp 'svg'\r\n                          'filename': `${saveName??'dashboard'}`,\r\n                          'height': 300,\r\n                          'width': 900,\r\n                          'scale': 1// # Multiply title/legend/axis/canvas sizes by this factor\r\n                      },\r\n                      showEditInChartStudio: true,\r\n                      plotlyServerURL: \"https://chart-studio.plotly.com\",\r\n                      '#Station':false\r\n                  }}\r\n                  useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst Chart = ({data=initData, getArr,getName,xKey,yKey,zKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        debugger\r\n        const traceData = data.map(t=>{\r\n            const x=[];\r\n            const y=[];\r\n            const z=[];\r\n            getArr(t).forEach(d=>{\r\n                x.push(d[xKey]);\r\n                y.push(d[yKey]);\r\n                z.push(d[zKey]);\r\n            })\r\n            return{\r\n                name:getName(t),\r\n                x,\r\n                y,\r\n                z,\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[xKey,yKey,zKey,data]);\r\n    const plotopt = useMemo(()=>{\r\n        return plotdata.map(d=>({\r\n            ...d,\r\n            type: 'scatter3d',\r\n            colorscale: \"Portland\",\r\n            mode: 'markers',\r\n            marker:{size:3}\r\n        }))\r\n    },[plotdata]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={{...layout,\r\n        scene: {\r\n            xaxis: {\r\n                title: {text: xKey}\r\n            },\r\n            yaxis: {\r\n                title: {text: yKey}\r\n            },\r\n            zaxis: {\r\n                title: {text: zKey}\r\n            }\r\n        }\r\n    }} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n    hovermode:'closest',\r\n    dragmode:'select',\r\n    plot_bgcolor:'rgba(240,240,240, 0.95)',\r\n    grid:{roworder:'bottom to top'}\r\n};\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    useEffect(()=>{\r\n        const traceData = data.map(t=>{\r\n            const dimensions = dimensionKeys.map(k=> ({label:k, values:[]}));\r\n            getArr(t).forEach(d=>{\r\n                dimensions.forEach((k)=>{\r\n                    k.values.push(d[k.label]);\r\n                });\r\n            })\r\n            return {\r\n                type: 'splom',\r\n                name:getName(t),\r\n                dimensions,\r\n                marker: {\r\n                    size: 5,\r\n                    line: {\r\n                        color: 'white',\r\n                        width: 0.5\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        setPlotdata(traceData)\r\n    },[dimensionKeys,data]);\r\n    useEffect(()=>{\r\n        const layout = {...initLayout};\r\n        dimensionKeys.forEach((k,i)=> {\r\n            layout[`xaxis${i}`] = axis()\r\n            layout[`yaxis${i}`] = axis()\r\n        })\r\n        setLayout(layout)\r\n    },[dimensionKeys])\r\n    const axis = () => ({\r\n        showline:false,\r\n        zeroline:false,\r\n        gridcolor:'#ffff',\r\n        ticklen:4\r\n    })\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;","import * as d3 from 'd3'\r\nexport const PCA = function(){\r\n    this.scale = scale;\r\n    this.pca = pca;\r\n\r\n    function mean(X){\r\n        // mean by col\r\n        var T = transpose(X);\r\n        return T.map(function(row){ return d3.sum(row) / X.length; });\r\n    }\r\n\r\n    function transpose(X){\r\n        return d3.range(X[0].length).map(function(i){\r\n            return X.map(function(row){ return row[i]; });\r\n        });\r\n    }\r\n\r\n    function dot(X,Y){\r\n        return X.map(function(row){\r\n            return transpose(Y).map(function(col){\r\n                return d3.sum(d3.zip(row,col).map(function(v){\r\n                    return v[0]*v[1];\r\n                }));\r\n            });\r\n        });\r\n    }\r\n\r\n    function diag(X){\r\n        return d3.range(X.length).map(function(i){\r\n            return d3.range(X.length).map(function(j){ return (i === j) ? X[i] : 0; });\r\n        });\r\n    }\r\n\r\n    function zeros(i,j){\r\n        return d3.range(i).map(function(row){\r\n            return d3.range(j).map(function(){ return 0; });\r\n        });\r\n    }\r\n\r\n    function trunc(X,d){\r\n        return X.map(function(row){\r\n            return row.map(function(x){ return (x < d) ? 0 : x; });\r\n        });\r\n    }\r\n\r\n    function same(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0] === w[1]; });\r\n        }).map(function(row){\r\n            return row.reduce(function(x,y){ return x*y; });\r\n        }).reduce(function(x,y){ return x*y; });\r\n    }\r\n\r\n    function std(X){\r\n        var m = mean(X);\r\n        return sqrt(mean(mul(X,X)));//, mul(m,m));\r\n    }\r\n\r\n    function sqrt(V){\r\n        return V.map(function(x){ return Math.sqrt(x); });\r\n    }\r\n\r\n    function mul(X,Y){\r\n        return d3.zip(X,Y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]*v[1];\r\n            return d3.zip(v[0],v[1]).map(function(w){ return w[0]*w[1]; });\r\n        });\r\n    }\r\n\r\n    function sub(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){\r\n            if (typeof(v[0]) === 'number') return v[0]-v[1];\r\n            else return d3.zip(v[0],v[1]).map(function(w){ return w[0]-w[1]; });\r\n        });\r\n    }\r\n\r\n    function div(x,y){\r\n        console.assert(x.length === y.length, 'dim(x) == dim(y)');\r\n        return d3.zip(x,y).map(function(v){ return v[1]!==0 ? v[0]/(v[1]): 0; });\r\n\r\n    }\r\n\r\n    function scale(X, center, scale){\r\n        // compatible with R scale()\r\n        if (center){\r\n            var m = mean(X);\r\n            X = X.map(function(row){ return sub(row, m); });\r\n        }\r\n\r\n        if (scale){\r\n            var s = std(X);\r\n            X = X.map(function(row){ return div(row, s); });\r\n        }\r\n        return X;\r\n    }\r\n\r\n    // translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n    function svd(A){\r\n        var temp;\r\n        // Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n        var prec = Math.pow(2,-52); // assumes double prec\r\n        var tolerance = 1.e-64/prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n\r\n        var u = A.map(function(row){ return row.slice(0); });\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n\r\n        console.assert(m >= n, 'Need more rows than columns');\r\n\r\n        var e = d3.range(n).map(function(){ return 0; });\r\n        var q = d3.range(n).map(function(){ return 0; });\r\n        var v = zeros(n,n);\r\n\r\n        function pythag(a,b){\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a*Math.sqrt(1.0+(b*b/a/a));\r\n            else if (b === 0)\r\n                return a;\r\n            return b*Math.sqrt(1.0+(a*a/b/b));\r\n        }\r\n\r\n        // Householder's reduction to bidiagonal form\r\n        var f = 0;\r\n        var g = 0;\r\n        var h = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n        var z = 0;\r\n        var s = 0;\r\n\r\n        for (i=0; i < n; i++)\r\n        {\r\n            e[i]= g;\r\n            s= 0.0;\r\n            l= i+1;\r\n            for (j=i; j < m; j++)\r\n                s += (u[j][i]*u[j][i]);\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g-s;\r\n                u[i][i]=f-g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s= 0.0;\r\n                    for (k=i; k < m; k++)\r\n                        s += u[k][i]*u[k][j]\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++)\r\n                        u[k][j]+=f*u[k][i]\r\n                }\r\n            }\r\n            q[i]= g;\r\n            s= 0.0;\r\n            for (j=l; j < n; j++)\r\n                s= s + u[i][j]*u[i][j]\r\n            if (s <= tolerance)\r\n                g= 0.0;\r\n            else\r\n            {\r\n                f= u[i][i+1];\r\n                g= Math.sqrt(s);\r\n                if (f >= 0.0) g= -g;\r\n                h= f*g - s;\r\n                u[i][i+1] = f-g;\r\n                for (j=l; j < n; j++) e[j]= u[i][j]/h\r\n                for (j=l; j < m; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += (u[j][k]*u[i][k])\r\n                    for (k=l; k < n; k++)\r\n                        u[j][k]+=s*e[k]\r\n                }\r\n            }\r\n            y= Math.abs(q[i])+Math.abs(e[i]);\r\n            if (y>x)\r\n                x=y;\r\n        }\r\n\r\n        // accumulation of right hand gtransformations\r\n        for (i = n-1; i !== -1; i+= -1)\r\n        {\r\n            if (g !== 0.0)\r\n            {\r\n                h= g*u[i][i+1];\r\n                for (j=l; j < n; j++)\r\n                    v[j][i]=u[i][j]/h\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < n; k++)\r\n                        s += u[i][k]*v[k][j]\r\n                    for (k=l; k < n; k++)\r\n                        v[k][j]+=(s*v[k][i])\r\n                }\r\n            }\r\n            for (j=l; j < n; j++)\r\n            {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g= e[i];\r\n            l= i\r\n        }\r\n\r\n        // accumulation of left hand transformations\r\n        for (i=n-1; i !== -1; i+= -1)\r\n        {\r\n            l= i+1;\r\n            g= q[i];\r\n            for (j=l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g !== 0.0)\r\n            {\r\n                h= u[i][i]*g;\r\n                for (j=l; j < n; j++)\r\n                {\r\n                    s=0.0;\r\n                    for (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n                    f= s/h;\r\n                    for (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n                }\r\n                for (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n            }\r\n            else\r\n                for (j=i; j < m; j++) u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n\r\n        // diagonalization of the bidiagonal form\r\n        prec= prec*x;\r\n        for (k=n-1; k !== -1; k+= -1)\r\n        {\r\n            for (var iteration=0; iteration < itmax; iteration++)\r\n            {// test f splitting\r\n                var test_convergence = false;\r\n                for (l=k; l !== -1; l+= -1)\r\n                {\r\n                    if (Math.abs(e[l]) <= prec){\r\n                        test_convergence= true;\r\n                        break\r\n                    }\r\n                    if (Math.abs(q[l-1]) <= prec)\r\n                        break\r\n                }\r\n                if (!test_convergence){\r\n                    // cancellation of e[l] if l>0\r\n                    c= 0.0;\r\n                    s= 1.0;\r\n                    var l1= l-1;\r\n                    for (i =l; i<k+1; i++)\r\n                    {\r\n                        f= s*e[i];\r\n                        e[i]= c*e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g= q[i];\r\n                        h= pythag(f,g);\r\n                        q[i]= h;\r\n                        c= g/h;\r\n                        s= -f/h;\r\n                        for (j=0; j < m; j++)\r\n                        {\r\n                            y= u[j][l1];\r\n                            z= u[j][i];\r\n                            u[j][l1] =  y*c+(z*s);\r\n                            u[j][i] = -y*s+(z*c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z= q[k];\r\n                if (l=== k){\r\n                    //convergence\r\n                    if (z<0.0)\r\n                    { //q[k] is made non-negative\r\n                        q[k]= -z;\r\n                        for (j=0; j < n; j++)\r\n                            v[j][k] = -v[j][k]\r\n                    }\r\n                    break  //break out of iteration loop and move on to next k value\r\n                }\r\n\r\n                console.assert(iteration < itmax-1, 'Error: no convergence.');\r\n\r\n                // shift from bottom 2x2 minor\r\n                x= q[l];\r\n                y= q[k-1];\r\n                g= e[k-1];\r\n                h= e[k];\r\n                f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);\r\n                g= pythag(f,1.0);\r\n                if (f < 0.0)\r\n                    f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x;\r\n                else\r\n                    f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x;\r\n                // next QR transformation\r\n                c= 1.0;\r\n                s= 1.0;\r\n                for (i=l+1; i< k+1; i++)\r\n                {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s*g;\r\n                    g = c*g;\r\n                    z = pythag(f,h);\r\n                    e[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = x*c+g*s;\r\n                    g = -x*s+g*c;\r\n                    h = y*s;\r\n                    y = y*c;\r\n                    for (j =0; j < n; j++)\r\n                    {\r\n                        x = v[j][i-1];\r\n                        z = v[j][i];\r\n                        v[j][i-1]  = x*c+z*s;\r\n                        v[j][i]  = -x*s+z*c;\r\n                    }\r\n                    z = pythag(f,h);\r\n                    q[i-1] = z;\r\n                    c = f/z;\r\n                    s = h/z;\r\n                    f = c*g+s*y;\r\n                    x = -s*g+c*y;\r\n                    for (j =0; j < m; j++)\r\n                    {\r\n                        y = u[j][i-1];\r\n                        z = u[j][i];\r\n                        u[j][i-1]  = y*c+z*s;\r\n                        u[j][i]  = -y*s+z*c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n\r\n        // vt = transpose(v)\r\n        // return (u,q,vt)\r\n        for (i=0;i<q.length; i++)\r\n            if (q[i] < prec) q[i] = 0;\r\n\r\n        // sort eigenvalues\r\n        for (i=0; i< n; i++){\r\n            // writeln(q)\r\n            for (j=i-1; j >= 0; j--){\r\n                if (q[j] < q[i]){\r\n                    // writeln(i,'-',j)\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n                    for (k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n                    i = j\r\n                }\r\n            }\r\n        }\r\n        return { U:u, S:q, V:v }\r\n    }\r\n\r\n    function pca(X,npc){\r\n        var USV = svd(X);\r\n        var U = USV.U;\r\n        var S = diag(USV.S);\r\n        var V = USV.V;\r\n\r\n        // T = X*V = U*S\r\n        var pcXV = dot(X,V);\r\n        var pcUdS = dot(U,S);\r\n\r\n        // var prod = trunc(sub(pcXV,pcUdS), 1e-11);\r\n        var prod = trunc(sub(pcXV,pcUdS), 1e-12);\r\n        var zero = zeros(prod.length, prod[0].length);\r\n        console.assert(same(prod,zero), 'svd and eig ways must be the same.');\r\n        var twomost = [];\r\n        for (var ipc =0; ipc<npc; ipc++)\r\n            twomost.push(ipc);\r\n\r\n        for (var i in USV.S) {\r\n            for (var ipc =0; ipc<npc; ipc++) {\r\n                if (USV.S[i]>=USV.S[twomost[ipc]]) {\r\n                    twomost[ipc] = parseInt(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return [pcUdS,V,twomost,S] ;\r\n    }\r\n};","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, sum as d3sum, scaleLinear} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData,domain, getArr,getName,dimensionKeys,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                const normScale = {};\r\n                let invalid = false;\r\n                dimensionKeys.forEach(d=>{\r\n                    if (domain[d])\r\n                        normScale[d] = scaleLinear().domain([domain[d][0],domain[d][1]]);\r\n                    else\r\n                        invalid = true;\r\n                })\r\n                if (invalid)\r\n                    return\r\n                const dataIn = [];\r\n                const traceIndex = [];\r\n                data.forEach((t, ti) => {\r\n                    traceIndex[ti] = [];\r\n                    getArr(t).forEach(d => {\r\n                        let item = dimensionKeys.map((k) => normScale[k](+d[k]));\r\n                        traceIndex[ti].push(dataIn.length);\r\n                        dataIn.push(item);\r\n                    })\r\n                })\r\n                debugger\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys);\r\n                const traceData = data.map((t, ti) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: getName(t),\r\n                        x: traceIndex[ti].map(i => solution[i][0]),\r\n                        y: traceIndex[ti].map(i => solution[i][1]),\r\n                    }\r\n                })\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`},\r\n                        constrain: 'domain'\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`},\r\n                        scaleanchor: 'x'\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data,domain]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let matrix = pca.scale(dataIn, true, false);\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    // console.log(B)\r\n    let solution = dataIn.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        dd.data = d;\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = dimensions.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\nimport {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum, scaleLinear} from 'd3';\r\nimport {PCA} from './PCA'\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,l:50,b:50,r:10},\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKeys,domain,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                const normScale = {};\r\n                let invalid = false;\r\n                dimensionKeys.forEach(d=>{\r\n                    if (domain[d])\r\n                        normScale[d] = scaleLinear().domain([domain[d][0],domain[d][1]]);\r\n                    else\r\n                        invalid = true;\r\n                })\r\n                if (invalid)\r\n                    return\r\n                let segmentKeys = data.map(t=>getName(t));\r\n                let len = d3min(data,t=>getArr(t).length);\r\n                // const dataIn = dimensionKeys.map(k=>d3range(0,len));\r\n                // data.forEach((t, ti) => {\r\n                //     let _d = getArr(t);\r\n                //     for (let i=0; i<len;i++){\r\n                //         let d = _d[i];\r\n                //         dimensionKeys.forEach((k,di) => {\r\n                //             dataIn[di][i][ti] = +d[k]\r\n                //         });\r\n                //     }\r\n                // })\r\n                const dataIn = [];\r\n                data.forEach((t, ti) => {\r\n                    let _d = getArr(t);\r\n                    for (let i=0; i<len;i++){\r\n                        let d = _d[i];\r\n                        let item = dimensionKeys.map((k) => normScale[k](+d[k]));\r\n                        dataIn.push(item);\r\n                    }\r\n                })\r\n\r\n                const {solution, feature,contribute} = calculatePCA(dataIn, dimensionKeys, segmentKeys, len);\r\n                const seg = d3range(0,len);\r\n                const traceData = dimensionKeys.map((d, di) => {\r\n                    return {\r\n                        type: 'scatters',\r\n                        mode: 'markers',\r\n                        name: d,\r\n                        x: seg.map(i => solution[di*len+i][0]),\r\n                        y: seg.map(i => solution[di*len+i][1]),\r\n                    }\r\n                })\r\n                debugger\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    xaxis: {\r\n                        title: {text: `PC1 (${Math.round(contribute[0]*1000)/10}%)`},\r\n                        constrain: 'domain'\r\n                    },\r\n                    yaxis: {\r\n                        title: {text: `PC2 (${Math.round(contribute[1]*1000)/10}%)`},\r\n                        scaleanchor: 'x'\r\n                    }\r\n                };\r\n                layout.shapes = feature.map(f=>({\r\n                    type: 'line',\r\n                    x0: f[0][0],\r\n                    y0: f[0][1],\r\n                    x1: f[1][0],\r\n                    y1: f[1][1],\r\n                }));\r\n                layout.annotations = feature.map(f=>({\r\n                    x: f[1][0],\r\n                    y: f[1][1],\r\n                    text: f.name,\r\n                    xanchor:'center',\r\n                    yanchor:'bottom',\r\n                    font:{color:(f.pc1||f.pc2)?'red':'unset'}\r\n                }));\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKeys,data,domain]);\r\n    // useEffect(()=>{\r\n    //     // const layout = {...initLayout};\r\n    //     // dimensionKeys.forEach((k,i)=> {\r\n    //     //     layout[`xaxis${i}`] = axis()\r\n    //     //     layout[`yaxis${i}`] = axis()\r\n    //     // })\r\n    //     // setLayout(layout)\r\n    // },[dimensionKeys])\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\nfunction calculatePCA(dataIn,dimensions,segment, len){\r\n\r\n    let pca = new PCA();\r\n    // console.log(brand_names);\r\n    let _matrix = pca.scale(dataIn, true, true);\r\n\r\n    // invert data hew\r\n    let matrix = []\r\n    for (let di=0; di<dimensions.length; di++) {\r\n        for (let i=0; i < len; i++) {\r\n            matrix[di*len+i] = segment.map((s,si)=>_matrix[si*len+i][di]);\r\n        }\r\n    }\r\n    debugger\r\n\r\n    // let matrix = pca.scale(dataIn, false, false);\r\n\r\n    let pc = pca.pca(matrix,DIM);\r\n\r\n    let A = pc[0];  // this is the U matrix from SVD\r\n    let B = pc[1];  // this is the dV matrix from SVD\r\n    let chosenPC = pc[2];   // this is the most value of PCA\r\n    let S = pc[3];   // this is the most value of PCA\r\n    console.log(B)\r\n    let solution = matrix.map((d,i)=>{\r\n        const dd = d3range(0,DIM).map(dim=>A[i][chosenPC[dim]]);\r\n        return dd\r\n    });\r\n    let xrange = d3extent(solution, d => d[0]);\r\n    let yrange = d3extent(solution, d => d[1]);\r\n\r\n    const root = [0,0];\r\n    let maxV = [[0,-Infinity],[0,-Infinity]]\r\n    const feature = segment.map(function (key, i) {\r\n        let brand = [root,d3range(0,DIM).map(dim=>B[i][chosenPC[dim]])];\r\n        maxV.forEach(([index,v],maxi)=>{\r\n            const cv = Math.abs(brand[1][maxi]-brand[0][maxi]);\r\n            if (cv>v)\r\n                maxV[maxi] = [i,cv]\r\n        })\r\n        brand.name = key;\r\n        return brand\r\n    });\r\n    feature[maxV[0][0]].pc1=true;\r\n    feature[maxV[1][0]].pc2=true;\r\n    debugger\r\n    let multiplyBrands = Math.sqrt(d3max([\r\n        distance(root,[xrange[0],yrange[0]]),\r\n        distance(root,[xrange[0],yrange[1]]),\r\n        distance(root,[xrange[1],yrange[0]]),\r\n        distance(root,[xrange[1],yrange[1]]),\r\n    ])/d3max(feature,d=>distance(root,[d[1][0],d[1][1]])));\r\n    feature.forEach(f=>{\r\n        f[1][0] = f[1][0]*multiplyBrands;\r\n        f[1][1] = f[1][1]*multiplyBrands;\r\n    });\r\n\r\n    const contributeMax = d3sum(S,(a,i)=>a[i]);\r\n    debugger\r\n    const contribute = d3range(0,DIM).map(d=>S[chosenPC[d]][chosenPC[d]]/contributeMax)\r\n\r\n    return {solution,feature,contribute};\r\n}\r\n","import Plot from 'react-plotly.js';\r\n// import {range as d3range, extent as d3extent, max as d3max, min as d3min, sum as d3sum} from 'd3';\r\n\r\nimport {useEffect, useMemo, useState, useTransition} from \"react\";\r\nconst initData = [];\r\nconst initLayout={title:{text:'',pad:0},margin:{t:10,r:10},\r\n    xaxis: {\r\n        ticks: '',\r\n        // side: 'top',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    },\r\n    yaxis: {\r\n        ticks: '',\r\n        ticksuffix: ' ',\r\n        tickfont: {\r\n            size: 8,\r\n        },\r\n    }\r\n};\r\n\r\nconst DIM = 2;\r\n\r\nconst Chart = ({data=initData, getArr,getName,dimensionKey})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [layout,setLayout] = useState(initLayout);\r\n    const [isPending,startTransition] = useTransition();\r\n    useEffect(()=>{\r\n        startTransition(()=>{\r\n            try {\r\n                let segmentKeys = [];\r\n                let p = data.map((t, ti) => {\r\n                    segmentKeys.push(getName(t))\r\n                    return getArr(t).map(d=>+d[dimensionKey])\r\n                })\r\n\r\n                let annotations= [];\r\n                const z =segmentKeys.map(d=>segmentKeys.map(d=>null));\r\n                z[segmentKeys.length-1][segmentKeys.length-1] = 1\r\n                for (let i=0;i<segmentKeys.length-1;i++){\r\n                    z[i][i] = 1\r\n                    for (let j=i+1;j<segmentKeys.length;j++){\r\n                        let xlen = p[i].length;\r\n                        let ylen = p[j].length;\r\n                        let coor = xlen<ylen?pearson(p[i],p[j]):pearson(p[j],p[i]);\r\n                        z[i][j] = Math.abs(coor);\r\n                        z[j][i] = z[i][j];\r\n                        if (z[i][j]>1)\r\n                            debugger\r\n                        annotations.push({\r\n                            xref: 'x1',\r\n                            yref: 'y1',\r\n                            x: segmentKeys[j],\r\n                            y: segmentKeys[i],\r\n                            text: Math.round(coor*100)/100,\r\n                            font: {\r\n                                color: 'white'\r\n                            },\r\n                            showarrow: false,\r\n                        })\r\n                    }\r\n                }\r\n\r\n                const traceData = [\r\n                    {\r\n                        type: 'heatmap',\r\n                        name: dimensionKey,\r\n                        x: segmentKeys,\r\n                        y: segmentKeys,\r\n                        z,\r\n                        zauto:false,\r\n                        zmin:0,\r\n                        zmax:1,\r\n                        hoverongaps: false,\r\n                        showscale:false,\r\n                    }\r\n                ]\r\n\r\n                setPlotdata(traceData)\r\n\r\n                const layout = {...initLayout,\r\n                    annotations\r\n                };\r\n\r\n\r\n                setLayout(layout)\r\n            }catch(e){\r\n                setPlotdata([])\r\n            }\r\n        });\r\n    },[dimensionKey,data]);\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\nfunction distance(a,b){\r\n    return Math.sqrt((a[1]-b[1])*(a[1]-b[1])+(a[0]-b[0])*(a[0]-b[0]));\r\n}\r\n\r\n\r\n// https://gist.github.com/matt-west/6500993\r\n// function pearson (x, y) {\r\n//     const promedio = l => l.reduce((s, a) => s + a, 0) / l.length\r\n//     const calc = (v, prom) => Math.sqrt(v.reduce((s, a) => (s + a * a), 0) - n * prom * prom)\r\n//     let n = x.length\r\n//     let nn = 0\r\n//     for (let i = 0; i < n; i++, nn++) {\r\n//         if ((!x[i] && x[i] !== 0) || (!y[i] && y[i] !== 0)) {\r\n//             nn--\r\n//             continue\r\n//         }\r\n//         x[nn] = x[i]\r\n//         y[nn] = y[i]\r\n//     }\r\n//     if (n !== nn) {\r\n//         x = x.splice(0, nn)\r\n//         y = y.splice(0, nn)\r\n//         n = nn\r\n//     }\r\n//     const prom_x = promedio(x), prom_y = promedio(y)\r\n//     return Math.min(1,(x\r\n//             .map((e, i) => ({ x: e, y: y[i] }))\r\n//             .reduce((v, a) => v + a.x * a.y, 0) - n * prom_x * prom_y\r\n//     ) / (calc(x, prom_x) * calc(y, prom_y)))\r\n// }\r\n\r\n/**\r\n * calculates pearson correlation\r\n * @param {number[]} d1\r\n * @param {number[]} d2\r\n */\r\nexport function pearson(d1, d2) {\r\n    let { min, pow, sqrt } = Math\r\n    let add = (a, b) => a + b\r\n    let n = min(d1.length, d2.length)\r\n    if (n === 0) {\r\n        return 0\r\n    }\r\n    [d1, d2] = [d1.slice(0, n), d2.slice(0, n)]\r\n    let [sum1, sum2] = [d1, d2].map(l => l.reduce(add))\r\n    let [pow1, pow2] = [d1, d2].map(l => l.reduce((a, b) => a + pow(b, 2), 0))\r\n    let mulSum = d1.map((n, i) => n * d2[i]).reduce(add)\r\n    let dense = sqrt((pow1 - pow(sum1, 2) / n) * (pow2 - pow(sum2, 2) / n))\r\n    if (dense === 0) {\r\n        return 0\r\n    }\r\n    return (mulSum - (sum1 * sum2 / n)) / dense\r\n}","import Plot from \"react-plotly.js\";\r\nimport {useEffect, useState, useTransition} from \"react\";\r\nimport {min as d3min, max as d3max, scaleLinear} from 'd3';\r\n\r\n\r\nconst initData=[];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:30}, height:150,violinmode: 'group',boxmode: 'group'}\r\nconst ViolinChart = ({data=initData,getArr,getName,dimensionKeys,domain,mode='violin'})=>{\r\n    const [isPending,startTransition] = useTransition();\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [domainR,setDomainR] = useState([]);\r\n    useEffect(()=> {\r\n        startTransition(() => {\r\n            const x = [];\r\n            const y = {};\r\n            dimensionKeys.forEach((k)=> {\r\n                y[k] = [];\r\n            });\r\n            setDomainR([d3min(dimensionKeys,k=>domain[k][0]),d3max(dimensionKeys,k=>domain[k][1])]);\r\n            data.map(t=> {\r\n                const tr = getName(t);\r\n                t[1].forEach(t=>{\r\n                    t.data.forEach(d=>{\r\n                        x.push(tr);\r\n                        dimensionKeys.forEach((k,i)=>{\r\n                            y[k].push(d[k])\r\n                        })\r\n                    })\r\n                })\r\n                // getArr(t).forEach(d=>{\r\n                //     x.push(tr);\r\n                //     dimensionKeys.forEach((k,i)=>{\r\n                //         y[k].push(d[k])\r\n                //     })\r\n                // })\r\n            });\r\n            const traceData = dimensionKeys.map(k=>{\r\n                return ({\r\n                    type: mode,\r\n                    x,\r\n                    y: y[k],\r\n                    legendgroup: k,\r\n                    scalegroup: k,\r\n                    name: k,\r\n                    points: 'none',\r\n                    box: {\r\n                        visible: true\r\n                    },\r\n                    // line: {\r\n                    //     color: 'blue',\r\n                    // },\r\n                    meanline: {\r\n                        visible: true\r\n                    }\r\n                })\r\n            })\r\n            setPlotdata(traceData)\r\n        })\r\n    },[data,dimensionKeys,mode]);\r\n    const _layout={...layout,\r\n        yaxis:{\r\n            autoscale:false,\r\n            range:scaleLinear().domain(domainR).nice(),\r\n        },\r\n    }\r\n    console.log(domainR,scaleLinear().domain(domainR).nice().domain())\r\n    return (<Plot className={`violin_${mode}`} data={plotdata} style={{width: '100%',height:'100%'}} layout={_layout} useResizeHandler={true}/>)\r\n}\r\nexport default ViolinChart","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {\r\n    Card,\r\n    Grid,\r\n    Typography,\r\n    Box,\r\n    Autocomplete,\r\n    TextField,\r\n    Stack,\r\n    MenuItem,\r\n    ToggleButton,\r\n    FormControlLabel, Checkbox\r\n} from \"@mui/material\";\r\nimport {lazy, useEffect, useRef, useState} from \"react\";\r\nimport {groups,extent as d3extent,min as d3min, max as d3max} from \"d3\";\r\n\r\n// dashboard routing\r\n// const LineChart = Loadable(lazy(() => import('../../components/viz/lineChart')));\r\n// const RibbonChart = Loadable(lazy(() => import('../../components/viz/Ribbon')));\r\nimport LineChart from \"../../components/viz/lineChart\";\r\nimport LineCharts from \"../../components/viz/lineChart/index_combine\";\r\nimport LineChartGap from \"../../components/viz/lineChart/index_min_max\";\r\nimport LineChartAggregate from \"../../components/viz/lineChart/index_aggregate\";\r\nimport RibbonChart from \"../../components/viz/Ribbon\";\r\nimport SplomChart from \"../../components/viz/Splom\";\r\nimport PCAChart from \"../../components/viz/PCA\";\r\nimport PCAChart2 from \"../../components/viz/PCA/index_reverse\";\r\nimport SimChart from \"../../components/viz/similarity\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport ViolinChart from \"../../components/viz/violinChart\";\r\n\r\nconst mapName={\"power_usage\":\"Power Usage (W)\",\r\n    index: \"Sample\",\r\n    voltage: \"Voltage (mV)\",\r\n    \"edge_temperature\": \"Edge Temp ('C)\",\r\n    \"memory_temperature\": \"Mem Temp ('C)\",\r\n    \"juntion_temperature\":\"Junction Temp ('C)\",\r\n    \"sclk\":\"GPU Frequency (MHz)\",\r\n    \"gpu_usage\":\"GPU Usage (%)\",\r\n    \"memory_usage\":\"Mem Usage (%)\"}\r\n\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [isSwap,setIsSwap] = useState(false);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [dimensionDetail,setDimensionDetail] = useState({});\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'z',key:null,is3D:true},\r\n        {label:'color',key:null},\r\n        {label:'dim',key:[],is3D:true},\r\n    ]);\r\n    const [resample,setResample] = useState('rolling');\r\n    const [normalize,setNormalize] = useState(false);\r\n    const optionContain = useRef();\r\n\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    const ROW = isSwap?'Profile':'AppName';\r\n    const COL = isSwap?'AppName':'Profile';\r\n    function handleNestData(isSwap,datas){\r\n        const newProfile = groups(datas,d=>d[ROW]);\r\n        const positionK = {};\r\n        const flatdata = [];\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d[COL]]===undefined){\r\n                    positionK[d[COL]] = app.length;\r\n                    app[positionK[d[COL]]]=[d[COL],[]];\r\n                }\r\n                app[positionK[d[COL]]][1].push(d);\r\n                flatdata.push(d.data);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        return {flatdata}\r\n    }\r\n    useEffect(()=>{\r\n        const {flatdata} = handleNestData(isSwap,datas);\r\n        const dimensionDetail = {};\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            let dim = Object.keys(datas[0].data[0]);\r\n            dim.forEach(k=>{\r\n                dimensionDetail[k] = [+Infinity,-Infinity];\r\n                const ex = flatdata.map(d=>d3extent(d,d=>+d[k]));\r\n                dimensionDetail[k] = [d3min(ex,d=>d[0]),d3max(ex,d=>d[1])];\r\n                if (mapName[k])\r\n                    dimensionDetail[k].label = mapName[k];\r\n            })\r\n            setDimension(dim)\r\n        }else\r\n            setDimension([]);\r\n        setDimensionDetail(dimensionDetail);\r\n    },[isSwap,datas]);\r\n\r\n\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    const largeLayout = ((plotType==='markers')||(plotType==='lines2')||(plotType==='violin')||(plotType==='errorbar')\r\n        ||(plotType==='errorbar2')||(plotType==='aggregate')||(plotType==='lines')||(plotType==='Splom'));\r\n    const renderAxis = ()=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'errorbar':\r\n            case 'errorbar2':\r\n            case 'lines':\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     getOptionLabel={d=>d}\r\n                                                     size={\"small\"}\r\n                                                     sx={{minWidth:200,display:a.is3D ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n            case 'aggregate':\r\n                return <>{[axis[0], axis[1]].map((a, i) => <Autocomplete value={a.key} key={a.label}\r\n                                                                         getOptionLabel={d => d}\r\n                                                                         size={\"small\"}\r\n                                                                         sx={{\r\n                                                                             minWidth: 200,\r\n                                                                             display: a.is3D ? 'none' : undefined\r\n                                                                         }}\r\n                                                                         options={dimension}\r\n                                                                         onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                                         renderInput={(params) => <TextField {...params}\r\n                                                                                                             label={a.label}/>}/>)}\r\n                    <TextField\r\n                        select\r\n                        label=\"Aggregate\"\r\n                        value={resample}\r\n                        key={'Aggregate'}\r\n                        size={\"small\"}\r\n                        onChange={(event)=>setResample(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'rolling'}>\r\n                            Moving window\r\n                        </MenuItem>\r\n                        <MenuItem value={'resample'}>\r\n                            Resampling\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    <FormControlLabel\r\n                        key={'Aggregate_Normalize'}\r\n                        value={normalize}\r\n                        onChange={(event)=>setNormalize(event.target.checked)}\r\n                        control={<Checkbox />}\r\n                        label={`Normalize ${axis[0].key}`}\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </>\r\n            case 'violin':\r\n            case 'boxplot':\r\n            case 'Splom':\r\n            case 'pca':\r\n            case 'pca_2':\r\n            case 'sim':\r\n            case 'lines2':\r\n                return <Autocomplete value={axis[4].key}\r\n                                     multiple\r\n                                     getOptionLabel={d=>d}\r\n                                     size={\"small\"}\r\n                                     options={dimension}\r\n                                     onChange={(event, newValue) => onChangeAxis(4, newValue)}\r\n                                     renderInput={(params) => <TextField {...params} label={axis[4].label}/>}/>\r\n            default:\r\n                return axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                                     size={\"small\"}\r\n                                                     getOptionLabel={d=>d}\r\n                                                     sx={{minWidth:200,display:a.label==='color' ?'none':undefined}}\r\n                                                     options={dimension}\r\n                                                     onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                                                     renderInput={(params) => <TextField {...params} label={a.label}/>}/>)\r\n        }\r\n    }\r\n    const renderPlots = ([profile,pData])=>{\r\n        switch (plotType){\r\n            case 'markers':\r\n            case 'lines':\r\n                return <Grid container>\r\n                    {pData.map(([app, appData],i) => <Grid key={`${profile} ${app}`} item xs={4}\r\n                                                           sx={{height: 200, mb: 3, paddingTop:2}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                        {appData[0] &&\r\n                            <LineChart data={appData[0]?.data}\r\n                                       xKey={axis[0].key}\r\n                                       yKey={axis[1].key}\r\n                                       domain={dimensionDetail}\r\n                                       cKey={axis[3].key}\r\n                                       colorDomain={dimensionDetail[axis[3].key]}\r\n                                       getName={([k,t])=>k}\r\n                                       mode={plotType}\r\n                                       showscale={i===2}\r\n                            />}\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'errorbar':\r\n                return <Grid container>\r\n                    <LineChartGap data={pData}\r\n                               xKey={axis[0].key}\r\n                               yKey={axis[1].key}\r\n                               domain={dimensionDetail}\r\n                               getName={([k,t])=>k}\r\n                    />\r\n                </Grid>\r\n            case 'errorbar2':\r\n                return <Grid container>\r\n                    <LineChartGap data={pData}\r\n                               xKey={axis[0].key}\r\n                               yKey={axis[1].key}\r\n                               domain={dimensionDetail}\r\n                               getName={([k,t])=>k}\r\n                              combile={true}\r\n                    />\r\n                </Grid>\r\n            case 'aggregate':\r\n                return <Grid container>\r\n                    <LineChartAggregate data={pData}\r\n                                  xKey={axis[0].key}\r\n                                  yKey={axis[1].key}\r\n                                  domain={dimensionDetail}\r\n                                  getName={([k,t])=>k}\r\n                                  combile={true}\r\n                                resample={resample}\r\n                                normalize={normalize}\r\n                                        saveName={profile}\r\n                    />\r\n                </Grid>\r\n            case 'lines2':\r\n                return <Grid container>{axis[4].key.map(k=><Grid key={k} item xs={axis[4].key.length>1?4:12}>\r\n                        <LineCharts\r\n                            getArr={([k, t]) => t[0] ? t[0].data : []}\r\n                            getName={([k, t]) => k}\r\n                            data={pData}\r\n                            xKey={'index'}\r\n                            yKey={k}\r\n                            domain={dimensionDetail}\r\n                        />\r\n                        </Grid>)}</Grid>\r\n            case 'violin':\r\n                return <ViolinChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    domain={dimensionDetail}\r\n                    data={pData}\r\n                    mode={'violin'}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'boxplot':\r\n                return <ViolinChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    domain={dimensionDetail}\r\n                    data={pData}\r\n                    mode={'box'}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'Splom':\r\n                return <SplomChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca':\r\n                return <PCAChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    domain={dimensionDetail}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'pca_2':\r\n                return <PCAChart2\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    domain={dimensionDetail}\r\n                    dimensionKeys={axis[4].key}\r\n                />\r\n            case 'sim':\r\n                return <Grid container>\r\n                    {axis[4].key.map((d) => <Grid key={d} item xs={axis[4].key.length>1?6:12} sx={{height: 200, mb: 3}}>\r\n                        <Typography variant={'h5'} textAlign={'center'}>{d}</Typography>\r\n                        <SimChart getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                                       getName={([k,t])=>k}\r\n                                       data={pData}\r\n                                       dimensionKey={d}\r\n                            />\r\n                    </Grid>)}\r\n                </Grid>\r\n            case 'Ribbon':\r\n                return <RibbonChart\r\n                    getArr={([k,t])=>t[0]?t[0].data:[]}\r\n                    getName={([k,t])=>k}\r\n                    data={pData}\r\n                    xKey={axis[0].key}\r\n                    yKey={axis[1].key}\r\n                    zKey={axis[2].key}\r\n                    cKey={axis[3].key}\r\n                />\r\n            default:\r\n                return <>Not support yet</>\r\n        }\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"} ref={optionContain}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                        <MenuItem value={'errorbar'}>\r\n                            Line chart with bound\r\n                        </MenuItem>\r\n                        <MenuItem value={'errorbar2'}>\r\n                            Line chart with bound 2\r\n                        </MenuItem>\r\n                        <MenuItem value={'aggregate'}>\r\n                            Line chart with aggregate\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines2'}>\r\n                            Line chart (combine)\r\n                        </MenuItem>\r\n                        <MenuItem value={'violin'}>\r\n                            Violin chart (combine)\r\n                        </MenuItem>\r\n                        <MenuItem value={'boxplot'}>\r\n                            Box plot (combine)\r\n                        </MenuItem>\r\n                        <MenuItem value={'Ribbon'}>\r\n                            3D scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'Splom'}>\r\n                            Splom\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca'}>\r\n                            PCA\r\n                        </MenuItem>\r\n                        <MenuItem value={'pca_2'}>\r\n                            PCA 2\r\n                        </MenuItem>\r\n                        <MenuItem value={'sim'}>\r\n                            Similarity matrix\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    <ToggleButton value=\"app_profile\" selected={isSwap} color=\"primary\"\r\n                                  onChange={()=>setIsSwap(!isSwap)}>Swap App and Profile</ToggleButton>\r\n                    {renderAxis()}\r\n\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={largeLayout?12:6} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h4'} sx={{textAlign:'center'}}>{profile}</Typography>\r\n                            {\r\n                                renderPlots([profile,pData])\r\n                            }\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","layout","title","text","pad","margin","t","l","b","r","data","xKey","domain","yKey","cKey","multiple","getName","colorDomain","mode","showscale","useTransition","startTransition","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","getData","d","calback","isArray","forEach","arr","x","y","push","name","fill","type","map","p","length","i","marker","color","colorscale","colorbarTitleText","colorbarThickness","cmin","cmax","_layout","yaxis","label","autorange","range","xaxis","style","width","height","useResizeHandler","getArr","traceData","autoscale","scaleLinear","nice","combile","d3color","scaleOrdinal","schemeCategory10","fillcolor","opacity","minmax","legendgroup","showlegend","line","av","maxlen","d3max","av_arrx","d3range","av_arry","len","arrx","it","undefined","ymean","d3mean","xmean","ymin","d3min","ymax","maxtracry","saveName","resample","normalize","resampleFunc","resolution","slice","Math","max","xarr","yarr","chunk","symbol","size","scalex","d3extent","customrange","config","showEditInChartStudio","plotlyServerURL","zKey","z","plotopt","useMemo","scene","zaxis","initLayout","hovermode","dragmode","plot_bgcolor","grid","roworder","dimensionKeys","setLayout","dimensions","k","values","axis","showline","zeroline","gridcolor","ticklen","PCA","mean","X","transpose","row","d3","dot","Y","col","v","zeros","j","sub","console","assert","w","this","scale","center","m","s","V","mul","sqrt","std","pca","npc","USV","A","temp","prec","pow","tolerance","itmax","c","u","n","e","q","pythag","a","abs","f","g","h","iteration","test_convergence","l1","U","S","svd","diag","pcXV","pcUdS","prod","trunc","zero","reduce","same","twomost","ipc","parseInt","DIM","normScale","invalid","dataIn","traceIndex","ti","item","matrix","pc","B","chosenPC","solution","dd","dim","xrange","yrange","contributeMax","d3sum","contribute","root","maxV","Infinity","feature","key","brand","maxi","cv","pc1","pc2","multiplyBrands","distance","calculatePCA","round","constrain","scaleanchor","shapes","x0","y0","x1","y1","annotations","xanchor","yanchor","font","segmentKeys","_d","segment","_matrix","di","si","log","seg","ticks","tickfont","ticksuffix","dimensionKey","coor","pearson","xref","yref","showarrow","zauto","zmin","zmax","hoverongaps","d1","d2","min","add","sum1","sum2","pow1","pow2","mulSum","dense","violinmode","boxmode","domainR","setDomainR","tr","scalegroup","points","box","visible","meanline","className","mapName","index","voltage","datas","useSelector","selectDatas","isSwap","setIsSwap","nestData","stNestData","dimension","setDimension","dimensionDetail","setDimensionDetail","plotType","setPlotType","is3D","setAxis","setResample","setNormalize","optionContain","useRef","ROW","COL","newProfile","groups","positionK","flatdata","newdata","pd","app","Object","keys","handleNestData","ex","onChangeAxis","value","largeLayout","renderPlots","profile","pData","Grid","container","appData","xs","sx","mb","paddingTop","Typography","variant","textAlign","Splom","Ribbon","spacing","gridSpacing","Stack","direction","ref","TextField","select","minWidth","onChange","event","target","MenuItem","ToggleButton","selected","Autocomplete","getOptionLabel","display","options","newValue","renderInput","params","FormControlLabel","checked","control","Checkbox","labelPlacement","renderAxis","Card","Box","pl"],"sourceRoot":""}