{"version":3,"file":"static/js/943.287d2a77.chunk.js","mappings":"sWAIMA,EAAS,GACTC,EAAO,CAACC,MAAM,CAACC,KAAK,GAAGC,IAAI,GAAGC,OAAO,CAACC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,KAyC7D,EAxCkB,SAAH,GAAkD,IAAD,IAA5CC,KAAAA,OAAI,IAAC,EAAAV,EAAQ,EAACW,EAAI,EAAJA,KAAKC,EAAI,EAAJA,KAAKC,EAAI,EAAJA,KAAK,EAAD,EAACC,KAAAA,OAAI,IAAC,SAAM,EACxD,GAA+BC,EAAAA,EAAAA,UAASf,GAAS,eAA1CgB,EAAQ,KAACC,EAAW,KAC3B,GAAiCF,EAAAA,EAAAA,UAAS,IAAG,eAAtCG,EAAS,KAACC,EAAY,MAC7BC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAE,GACFC,EAAE,GACRZ,EAAKa,SAAQ,SAAAC,GACTH,EAAEI,KAAKD,EAAEb,IACTW,EAAEG,KAAKD,EAAEZ,GACb,IACAK,EAAY,CACRI,EAAAA,EACAC,EAAAA,GAER,GAAE,CAACX,EAAKC,EAAKF,KACbU,EAAAA,EAAAA,YAAU,WAIED,EAHG,YAAPL,GAEID,EACaH,EAAKgB,KAAI,SAAAF,GAAC,OAAEA,EAAEX,EAAK,IAKvB,GACrB,GAAE,CAACH,EAAKG,EAAKC,IACb,IAAMa,EAAU,CAAC,CACbN,EAAEL,EAASK,EACXC,EAAEN,EAASM,EACXM,KAAM,UACNd,KAAAA,IAOJ,OAJII,EAAUW,SACVF,EAAQ,GAAGG,OAAS,CAACC,MAAMb,KAGvB,SAAC,IAAI,CAACR,KAAMiB,EAASK,MAAO,CAACC,MAAO,OAAOC,OAAO,QAASjC,OAAQA,EAAQkC,kBAAkB,GACzG,ECmDA,EApFY,WACR,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B,GAA8BvB,EAAAA,EAAAA,UAAS,IAAG,eAAnCwB,EAAQ,KAACC,EAAU,KAC1B,GAAiCzB,EAAAA,EAAAA,UAAS,IAAG,eAAtC0B,EAAS,KAACC,EAAY,KAC7B,GAA+B3B,EAAAA,EAAAA,UAAS,SAAQ,eAAzC4B,EAAQ,KAACC,EAAW,KAC3B,GAA2B7B,EAAAA,EAAAA,UAAS,IAAG,eACvC,GADa,KAAU,MACAA,EAAAA,EAAAA,UAAS,CAAC,CAAC8B,MAAM,IAAIC,IAAI,SAC5C,CAACD,MAAM,IAAIC,IAAI,WACf,CAACD,MAAM,QAAQC,SAAIC,MAAY,eAF5BC,EAAI,KAACC,EAAO,MAKnB7B,EAAAA,EAAAA,YAAU,WACN,IAAM8B,GAAaC,EAAAA,EAAAA,KAAOf,GAAM,SAAAZ,GAAC,OAAEA,EAAE4B,OAAO,IACtCC,EAAY,CAAC,EACbC,EAAUJ,EAAWxB,KAAI,YAAW,IAAD,eAAR6B,EAAC,KAACC,EAAE,KAC3BC,EAAMC,OAAOC,KAAKN,GAAW3B,KAAI,SAAAkC,GAAC,MAAE,CAACA,EAAE,GAAG,IAQhD,OAPAJ,EAAGjC,SAAQ,SAAAC,QACoBuB,IAAvBM,EAAU7B,EAAEqC,WACZR,EAAU7B,EAAEqC,SAAWJ,EAAI5B,OAC3B4B,EAAIJ,EAAU7B,EAAEqC,UAAU,CAACrC,EAAEqC,QAAQ,KAEzCJ,EAAIJ,EAAU7B,EAAEqC,UAAU,GAAGpC,KAAKD,EACtC,IACO,CAAC+B,EAAEE,EACd,IACAjB,EAAWc,GACPlB,EAAM,IAAIA,EAAM,GAAG1B,MAAM0B,EAAM,GAAG1B,KAAK,GACvCgC,EAAagB,OAAOC,KAAKvB,EAAM,GAAG1B,KAAK,KAEvCgC,EAAa,GACrB,GAAE,CAACN,IAKH,OACI,UAAC0B,EAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,GAAY,WACjC,SAACH,EAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG,UACd,UAACC,EAAA,EAAK,CAACJ,QAAS,EAAGK,UAAW,MAAM,WAChC,UAACC,EAAA,EAAS,CACNC,QAAM,EACN1B,MAAM,YACN2B,KAAK,QACLC,GAAI,CAACC,SAAS,KACdC,MAAOhC,EACPiC,SAAU,SAACC,GAAK,OAAGjC,EAAYiC,EAAMC,OAAOH,MAAM,EAAC,WAEnD,SAACI,EAAA,EAAQ,CAACJ,MAAO,UAAU,SAAC,kBAG5B,SAACI,EAAA,EAAQ,CAACJ,MAAO,QAAQ,SAAC,kBAIjC3B,EAAKtB,KAAI,SAACsD,EAAEC,GAAC,OAAG,SAACC,EAAA,EAAY,CAACP,MAAOK,EAAElC,IACT0B,KAAM,QACNC,GAAI,CAACC,SAAS,KAC9BS,QAAS1C,EACTmC,SAAU,SAACC,EAAOO,GAAQ,OA3B3BT,EA2BgDS,EA1BtEpC,EA0BmEiC,GA1BzDnC,IAAM6B,OAChB1B,GAAQ,OAAID,IAFK,IAAK2B,CA2ByD,EACxDU,YAAa,SAACC,GAAM,OAAK,SAAChB,EAAA,GAAS,kBAAKgB,GAAM,IAAEzC,MAAOmC,EAAEnC,QAAQ,GAL9BmC,EAAEnC,MAK+B,SAInFN,EAASb,KAAI,+BAAE6D,EAAO,KAACC,EAAK,YAAK,SAAC1B,EAAA,GAAI,CAACI,MAAI,EAAeC,GAAI,GAAG,UAC7D,SAACsB,EAAA,EAAI,WACD,UAACC,EAAA,EAAG,CAACjB,GAAI,CAAElB,EAAG,EAAGoC,GAAI,GAAI,WACrB,SAACC,EAAA,EAAU,CAACC,QAAS,KAAK,SAAEN,KAC5B,SAACzB,EAAA,GAAI,CAACC,WAAS,WACVyB,EAAM9D,KAAI,iCAAE+B,EAAG,KAACqC,EAAO,YAAI,UAAChC,EAAA,GAAI,CAA2BI,MAAI,EAACC,GAAI,EAAGM,GAAI,CAACvC,OAAO,IAAI6D,GAAG,GAAG,WAC1F,SAACH,EAAA,EAAU,CAACC,QAAS,KAAMG,UAAW,SAAS,SAAEvC,IAChDqC,EAAQ,KAAI,SAAC,EAAS,CAACpF,KAAgB,QAAZ,EAAEoF,EAAQ,UAAE,aAAV,EAAYpF,KAAMC,KAAMqC,EAAK,GAAGF,IAAKlC,KAAMoC,EAAK,GAAGF,IACzDjC,KAAMmC,EAAK,GAAGF,IAC1BhC,KAAM6B,MAAW,UAJS4C,EAAO,YAAI9B,GAK1C,YAVsB8B,EAe1C,MAIvB,C","sources":["components/viz/lineChart/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst initData=[];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst LineChart = ({data=initData,xKey,yKey,cKey,mode='line'})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    const [colordata,setColordata] = useState([]);\r\n    useEffect(()=>{\r\n        const x=[];\r\n        const y=[];\r\n        data.forEach(d=>{\r\n            x.push(d[xKey]);\r\n            y.push(d[yKey]);\r\n        })\r\n        setPlotdata({\r\n            x,\r\n            y,\r\n        })\r\n    },[xKey,yKey,data]);\r\n    useEffect(()=>{\r\n        if (mode==='markers'){\r\n            debugger\r\n            if (cKey) {\r\n                setColordata(data.map(d=>d[cKey]));\r\n            }else {\r\n                setColordata([]);\r\n            }\r\n        }else\r\n            setColordata([]);\r\n    },[data,cKey,mode])\r\n    const plotopt = [{\r\n        x:plotdata.x,\r\n        y:plotdata.y,\r\n        type: 'scatter',\r\n        mode\r\n        // marker: {color: 'red'},\r\n    }];\r\n    if (colordata.length)\r\n        plotopt[0].marker = {color:colordata}\r\n\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotopt} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack, MenuItem} from \"@mui/material\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {groups} from \"d3\";\r\nimport LineChart from \"../../components/viz/lineChart\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [plotType,setPlotType] = useState('lines');\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'color',key:undefined}]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    useEffect(()=>{\r\n        const newProfile = groups(datas,d=>d.Profile);\r\n        const positionK = {};\r\n        const newdata = newProfile.map(([p,pd])=>{\r\n            const app = Object.keys(positionK).map(k=>[k,[]]);\r\n            pd.forEach(d=>{\r\n                if (positionK[d.AppName]===undefined){\r\n                    positionK[d.AppName] = app.length;\r\n                    app[positionK[d.AppName]]=[d.AppName,[]];\r\n                }\r\n                app[positionK[d.AppName]][1].push(d);\r\n            })\r\n            return [p,app]\r\n        })\r\n        stNestData(newdata);\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            setDimension(Object.keys(datas[0].data[0]))\r\n        }else\r\n            setDimension([])\r\n    },[datas]);\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                    <TextField\r\n                        select\r\n                        label=\"Plot type\"\r\n                        size=\"small\"\r\n                        sx={{minWidth:200}}\r\n                        value={plotType}\r\n                        onChange={(event)=>setPlotType(event.target.value)}\r\n                    >\r\n                        <MenuItem value={'markers'}>\r\n                            Scatter plot\r\n                        </MenuItem>\r\n                        <MenuItem value={'lines'}>\r\n                            Line chart\r\n                        </MenuItem>\r\n                    </TextField>\r\n                {axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                               size={\"small\"}\r\n                                               sx={{minWidth:200}}\r\n                               options={dimension}\r\n                               onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                               renderInput={(params) => <TextField {...params} label={a.label}/>}/>)}\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={12} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography variant={'h3'}>{profile}</Typography>\r\n                            <Grid container>\r\n                                {pData.map(([app,appData])=><Grid key={`${profile} ${app}`} item xs={4} sx={{height:200,mb:3}}>\r\n                                    <Typography variant={'h5'} textAlign={'center'}>{app}</Typography>\r\n                                    {appData[0]&&<LineChart data={appData[0]?.data} xKey={axis[0].key} yKey={axis[1].key}\r\n                                                            cKey={axis[2].key}\r\n                                                mode={plotType}/>}\r\n                                    </Grid>)}\r\n\r\n                            </Grid>\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","layout","title","text","pad","margin","t","l","b","r","data","xKey","yKey","cKey","mode","useState","plotdata","setPlotdata","colordata","setColordata","useEffect","x","y","forEach","d","push","map","plotopt","type","length","marker","color","style","width","height","useResizeHandler","datas","useSelector","selectDatas","nestData","stNestData","dimension","setDimension","plotType","setPlotType","label","key","undefined","axis","setAxis","newProfile","groups","Profile","positionK","newdata","p","pd","app","Object","keys","k","AppName","Grid","container","spacing","gridSpacing","item","xs","Stack","direction","TextField","select","size","sx","minWidth","value","onChange","event","target","MenuItem","a","i","Autocomplete","options","newValue","renderInput","params","profile","pData","Card","Box","pl","Typography","variant","appData","mb","textAlign"],"sourceRoot":""}