{"version":3,"file":"static/js/943.11945f9d.chunk.js","mappings":"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","sources":["components/viz/lineChart/index.js","views/viz/index.js"],"sourcesContent":["import Plot from 'react-plotly.js';\r\n\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst initData=[];\r\nconst layout={title:{text:'',pad:0},margin:{t:10,l:50,b:20,r:10}}\r\nconst LineChart = ({data=initData,xKey,yKey})=>{\r\n    const [plotdata,setPlotdata] = useState(initData);\r\n    useEffect(()=>{\r\n        const x=[];\r\n        const y=[];\r\n        data.forEach(d=>{\r\n            x.push(d[xKey]);\r\n            y.push(d[yKey]);\r\n        })\r\n        setPlotdata([{\r\n            x,\r\n            y,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            marker: {color: 'red'},\r\n        }])\r\n    },[xKey,yKey,data])\r\n    // console.log(JSON.stringify(spec.data.values))\r\n    return (<Plot data={plotdata} style={{width: '100%',height:'100%'}} layout={layout} useResizeHandler={true}/>)\r\n}\r\n\r\nexport default LineChart","import {useSelector} from \"react-redux\";\r\nimport {\r\n    selectDatas\r\n} from \"../../store/actions/dataProcess\";\r\nimport {gridSpacing} from \"../../store/constant\";\r\nimport {Card, Grid, Typography, Box, Autocomplete, TextField, Stack} from \"@mui/material\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {groups} from \"d3\";\r\nimport LineChart from \"../../components/viz/lineChart\";\r\n\r\n// fix this later\r\nconst Viz = ()=>{\r\n    const datas = useSelector(selectDatas);\r\n    const [nestData,stNestData] = useState([]);\r\n    const [dimension,setDimension] = useState([]);\r\n    const [layout,setLayout] = useState([]);\r\n    const [axis,setAxis] = useState([{label:'x',key:\"index\"},\r\n        {label:'y',key:\"voltage\"},\r\n        {label:'color',key:\"junction_temperature\"}]);\r\n        // {key:\"gpu_usage\"}]);\r\n    // need to move this in the future\r\n    useEffect(()=>{\r\n        const newdata = groups(datas,d=>d.Profile,d=>d.AppName);\r\n        stNestData(newdata);\r\n        if (datas[0]&&datas[0].data&&datas[0].data[0]) {\r\n            setDimension(Object.keys(datas[0].data[0]))\r\n        }else\r\n            setDimension([])\r\n    },[datas]);\r\n    const onChangeAxis = (key,value)=>{\r\n        axis[key].key = value;\r\n        setAxis([...axis])\r\n    }\r\n    return(\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} >\r\n                <Stack spacing={2} direction={\"row\"}>\r\n                {axis.map((a,i)=><Autocomplete value={a.key} key={a.label}\r\n                                               size={\"small\"}\r\n                                               sx={{minWidth:200}}\r\n                               options={dimension}\r\n                               onChange={(event, newValue) => onChangeAxis(i, newValue)}\r\n                               renderInput={(params) => <TextField {...params} label={a.label}/>}/>)}\r\n                </Stack>\r\n            </Grid>\r\n            {\r\n                nestData.map(([profile,pData])=>(<Grid item key={profile} xs={12} >\r\n                    <Card>\r\n                        <Box sx={{ p: 2, pl: 2 }}>\r\n                            <Typography>{profile}</Typography>\r\n                            <Grid container>\r\n                                {pData.map(([app,appData])=><Grid key={`${profile} ${app}`} item xs={4} sx={{height:200,mb:3}}>\r\n                                    <Typography textAlign={'center'}>{app}</Typography>\r\n                                        <LineChart data={appData[0]?.data} xKey={axis[0].key} yKey={axis[1].key}/>\r\n                                    </Grid>)}\r\n\r\n                            </Grid>\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Viz;"],"names":["initData","layout","title","text","pad","margin","t","l","b","r","data","xKey","yKey","useState","plotdata","setPlotdata","useEffect","x","y","forEach","d","push","type","mode","marker","color","style","width","height","useResizeHandler","datas","useSelector","selectDatas","nestData","stNestData","dimension","setDimension","label","key","axis","setAxis","newdata","groups","Profile","AppName","Object","keys","Grid","container","spacing","gridSpacing","item","xs","Stack","direction","map","a","i","Autocomplete","value","size","sx","minWidth","options","onChange","event","newValue","renderInput","params","TextField","profile","pData","Card","Box","p","pl","Typography","app","appData","mb","textAlign"],"sourceRoot":""}